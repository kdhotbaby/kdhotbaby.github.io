<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hotbaby</title>
  <subtitle>hotbaby&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hotbaby.org/"/>
  <updated>2017-10-18T01:22:55.000Z</updated>
  <id>http://blog.hotbaby.org/</id>
  
  <author>
    <name>hotbaby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>当我跑步时，我在谈些什么</title>
    <link href="http://blog.hotbaby.org/2017/10/18/untitled-1508289466201/"/>
    <id>http://blog.hotbaby.org/2017/10/18/untitled-1508289466201/</id>
    <published>2017-10-18T01:22:55.000Z</published>
    <updated>2017-10-18T01:22:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>在肉体上时痛苦的，在精神上，令人沮丧的局面有时也会出现。不过，“痛苦”对于这一运动，乃是前提条件的东西。不伴随着痛苦，还有谁来挑战铁人三项赛事和全程马拉松这种费时耗力的运动呢？正因为痛苦，正因为刻意经历者这种痛苦，我才从这个过程中发现自己还活着的感觉，至少是发现了一部分。我现在意识到：生存的质量并非成绩、数字、名次之类固定的东西，而是含于运动中流动性的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在肉体上时痛苦的，在精神上，令人沮丧的局面有时也会出现。不过，“痛苦”对于这一运动，乃是前提条件的东西。不伴随着痛苦，还有谁来挑战铁人三项赛事和全程马拉松这种费时耗力的运动呢？正因为痛苦，正因为刻意经历者这种痛苦，我才从这个过程中发现自己还活着的感觉，至少是发现了一部分。我
    
    </summary>
    
    
      <category term="跑步" scheme="http://blog.hotbaby.org/tags/%E8%B7%91%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>12 Factor</title>
    <link href="http://blog.hotbaby.org/2017/09/30/untitled-1506735628892/"/>
    <id>http://blog.hotbaby.org/2017/09/30/untitled-1506735628892/</id>
    <published>2017-09-30T01:41:03.000Z</published>
    <updated>2017-09-30T01:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://12factor.net/" target="_blank" rel="external">12factor</a></li>
<li><a href="https://12factor.net/zh_cn/" target="_blank" rel="external">12factor中文版</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://12factor.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1
    
    </summary>
    
    
      <category term="12factor" scheme="http://blog.hotbaby.org/tags/12factor/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://blog.hotbaby.org/2017/09/16/untitled-1501583914843/"/>
    <id>http://blog.hotbaby.org/2017/09/16/untitled-1501583914843/</id>
    <published>2017-09-16T08:16:15.000Z</published>
    <updated>2017-10-21T16:43:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据库远程访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;USERNAME&apos;@&apos;%&apos; IDENTIFIED </div><div class="line">BY &apos;PASSWORD&apos; WITH GRANT OPTION;</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<p>创建数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE database_name CHARACTER SET utf8;</div></pre></td></tr></table></figure>
<p>导出数据库表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqldump -h127.0.0.1 -uusername -ppassword</div><div class="line">database_name table_name &gt; database_name.table_name.sql;</div></pre></td></tr></table></figure>
<p>导出数据库（条件导出）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqldump -h127.0.0.1 -uusername -ppassword</div><div class="line">database_name table_name --where=&quot;id&gt;100&quot; &gt; database_name.table_name.sql;</div></pre></td></tr></table></figure>
<p>导入数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql -h127.0.0.1 -uusername -ppassword </div><div class="line">database_name &lt; database_name.table_name.sql;</div><div class="line"></div><div class="line">mysql -uusername -ppassword;</div><div class="line">&gt; source sql_file_path;</div></pre></td></tr></table></figure>
<p>数据从一个导入到另一个表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insert into database_name.table_name (field1, field2) select field1, field2</div><div class="line">from database_name.table_name;</div></pre></td></tr></table></figure>
<p>根据一个表信息更新另一个表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE kdreader.library_book inner join store_book set kdreader.library_book.author_id=store_book.author_id where kdreader.library_book.name=store_book.title;</div></pre></td></tr></table></figure>
<p>修改表结构，增加Column</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table table_name add COLUMN field_name field_type </div><div class="line">DEFAULT default_value;</div></pre></td></tr></table></figure>
<p>修改表结构，更改Column</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table table_name alter column field_name field_type </div><div class="line">default default_value;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table table_name change column old_field_name new_field_name field_type</div><div class="line">default default_value;</div></pre></td></tr></table></figure>
<p>修改表结构，删除Column</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table table_name drop column field_name;</div></pre></td></tr></table></figure>
<p>修改表结构，删除unique限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table table_name drop index unique_key_name;</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: 注释是unique_key_name，不是field_name</p>
</blockquote>
<p>分组查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select book_labels.label_id, count(book_labels.book_id) </div><div class="line">from store_book_labels as book_labels</div><div class="line">group by book_labels.label_id </div><div class="line">order by count(book_labels.book_id) desc limit 20;</div></pre></td></tr></table></figure>
<p>修改表名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE old_name RENAME TO new_name;</div></pre></td></tr></table></figure>
<p>增加外键</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> news <span class="keyword">add</span> foreign <span class="keyword">key</span> <span class="string">`news_fk_user`</span>(<span class="string">`user_id`</span>) <span class="keyword">references</span> <span class="string">`auth_user`</span>(<span class="string">`id`</span>);</div></pre></td></tr></table></figure>
<p>增加unique限制</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> tbale table_name <span class="keyword">add</span> <span class="keyword">unique</span>(<span class="string">`column_name`</span>);</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html" target="_blank" rel="external">developer mysqldump</a></li>
<li><a href="http://www.mysqltutorial.org/mysql-foreign-key/" target="_blank" rel="external">MySQL foreign key</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库远程访问&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
    
    </summary>
    
    
      <category term="MySQL" scheme="http://blog.hotbaby.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python资源</title>
    <link href="http://blog.hotbaby.org/2017/08/23/untitled-1503452426877/"/>
    <id>http://blog.hotbaby.org/2017/08/23/untitled-1503452426877/</id>
    <published>2017-08-23T01:40:26.000Z</published>
    <updated>2017-10-21T16:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://docs.python.org/2/" target="_blank" rel="external">Python 2.7.13 documentation</a></li>
<li><a href="http://flask.pocoo.org/" target="_blank" rel="external">Flask</a></li>
<li><a href="http://api.mongodb.com/python/current/index.html" target="_blank" rel="external">PyMongo</a></li>
<li><a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="external">Virtual environments</a></li>
<li><a href="http://mengyangyang.org/scrapy/" target="_blank" rel="external">Scrapy documentation</a></li>
<li><a href="https://python-packaging.readthedocs.io/en/latest/" target="_blank" rel="external">Python pakaging</a></li>
<li><a href="https://github.com/benediktschmitt/py-jsonapi" target="_blank" rel="external">py-jsonapi</a></li>
<li><a href="http://flask-rest-jsonapi.readthedocs.io/en/latest/" target="_blank" rel="external">flask-rest-jsonapi</a></li>
<li><a href="https://github.com/socialwifi/jsonapi-requests/" target="_blank" rel="external">jsonapi-requests</a></li>
<li><a href="https://pip.readthedocs.io/en/1.1/requirements.html" target="_blank" rel="external">requirements</a></li>
<li><a href="http://nose.readthedocs.io/en/latest/" target="_blank" rel="external">nose</a></li>
<li><a href="https://flask-oauthlib.readthedocs.io/en/latest/" target="_blank" rel="external">flask-oauthlib</a></li>
<li><a href="http://www.django-rest-framework.org/" target="_blank" rel="external">django rest framework website</a></li>
<li><a href="https://github.com/encode/django-rest-framework" target="_blank" rel="external">django rest framework GitHub</a></li>
<li><a href="https://pythonhosted.org/blinker/" target="_blank" rel="external">blinker</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python 2.7.13 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flask.
    
    </summary>
    
      <category term="Python" scheme="http://blog.hotbaby.org/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python社区</title>
    <link href="http://blog.hotbaby.org/2017/08/16/untitled-1502839363376/"/>
    <id>http://blog.hotbaby.org/2017/08/16/untitled-1502839363376/</id>
    <published>2017-08-16T16:14:50.000Z</published>
    <updated>2017-10-21T16:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://zhuanlan.zhihu.com/zimei" target="_blank" rel="external">Python中文社区-知乎专栏</a></li>
<li><a href="https://stackoverflow.com/questions/tagged/python" target="_blank" rel="external">Python stack overflow</a></li>
<li><a href="https://python.freelycode.com" target="_blank" rel="external">Python部落</a></li>
<li><a href="https://www.douban.com/group/python/" target="_blank" rel="external">Python豆瓣编程小组</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/zimei&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python中文社区-知乎专栏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverfl
    
    </summary>
    
      <category term="Python" scheme="http://blog.hotbaby.org/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Cache</title>
    <link href="http://blog.hotbaby.org/2017/07/29/http-cache/"/>
    <id>http://blog.hotbaby.org/2017/07/29/http-cache/</id>
    <published>2017-07-29T14:58:04.000Z</published>
    <updated>2017-08-02T02:31:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>缓存是某个资源(或文档)的副本。对于私有缓存，可以服务同一个客户端的对同一个资源多次的请求，比如浏览器缓存。对于共享缓存(或代理缓存)，可以服务多个客户端对于同一个资源的请求，比如CDN。为什么需要缓存，缓存有哪些优点：</p>
<ul>
<li>减少网络延迟，更快的加载内容，提高用户体验</li>
<li>减少冗余数据传输，降低网络负载</li>
<li>降低服务器负载，服务器可以更快的处理请求</li>
</ul>
<h2 id="不同类型的缓存"><a href="#不同类型的缓存" class="headerlink" title="不同类型的缓存"></a>不同类型的缓存</h2><ul>
<li>私有缓存 - 服务于单个用户</li>
<li>共享缓存 -存储响应被很多用户复用</li>
</ul>
<p>其他缓存，gateway cache, CDN, reverse proxy cache 和　部署在服务器上的负载均衡器，以获得更好的可靠性和性能．</p>
<p><img src="http://www.processon.com/chart_image/597c3deee4b06e43d2d663b5.png" alt="HTTP Cache Type"></p>
<p><strong>私有浏览器缓存(Private browser cache)</strong></p>
<p>私有缓存服务于单个用户．</p>
<h3 id="共享代理缓存-Shared-proxy-caches"><a href="#共享代理缓存-Shared-proxy-caches" class="headerlink" title="共享代理缓存(Shared proxy caches)"></a>共享代理缓存(Shared proxy caches)</h3><p>共享缓存服务于多个用户．比如ISP或者企业可以配置一个web代理，作为本地网络基础架构，服务于多个用户．热点资源可以被多个用户复用，减少网络流量和延迟．　</p>
<p>常用的缓存条目的形式：</p>
<ul>
<li>成功的检索请求结果 - 200 OK响应，比如HTML 文档，图片或者文件</li>
<li>永久重定向 - 301(Moved Permanently)响应</li>
<li>错误响应 - 404(Not Found)结果页</li>
<li>未完成的结果 - 206(Partial Content)响应</li>
<li>不仅仅是GET请求的响应 - 定义一个合适的cache key</li>
</ul>
<h2 id="缓存处理步骤"><a href="#缓存处理步骤" class="headerlink" title="缓存处理步骤"></a>缓存处理步骤</h2><p>对于一个HTTP GET请求报文，基本缓存处理包含7个步骤：</p>
<ol>
<li>接收-缓存从网络中读取请求报文</li>
<li>解析-缓存对报文进行解析，提取HTTP首部信息</li>
<li>查询-缓存查询是否命中，如果没有，则从源服务器获取，并缓存到本地</li>
<li>新鲜度检测-检查副本是否新鲜，如果不新鲜，则与源服务器进行验证</li>
<li>响应-缓存用新的首部和缓存主体创建响应报文</li>
<li>发送-缓存通过网络将响应发送给客户端</li>
<li>日志-缓存记录这次请求的日志</li>
</ol>
<p>缓存处理流程图：<br><img src="http://www.processon.com/chart_image/597ca20ee4b06e43d2d675ec.png" alt="HTTP_CACHE_GET_FLOW_CHART"></p>
<h2 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h2><p>服务器可以通过HTTP定义文档过期之前可以将其缓存多长时间。</p>
<ul>
<li>Cache-Control: no-store</li>
<li>Cache-Control: no-cache</li>
<li>Cache-Control: must-revalidate</li>
<li>Cache-Control: max-age</li>
<li>Expires</li>
</ul>
<p>no-store与no-cache</p>
<p>HTTP/1.1提供了几种限制对象缓存方式。 no-store和no-cache首部可以防止缓存未经证实的已缓存对象：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Pragma</span>: no-cache</div><div class="line"><span class="attribute">Cache-Control</span>: no-store</div><div class="line"><span class="attribute">Cache-Control</span>: no-cache</div></pre></td></tr></table></figure>
<p>标识为<code>no-store</code>的响应回禁止缓存对响应进行复制。标识为<code>no-cache</code>的响应可以在本地缓存中，只是在与服务器进行新鲜度再验证之前，缓存不能提供给客户端使用。</p>
<p><code>Cache-Control: max-age=3600</code>表示收到服务器响应文档处于新鲜状态的秒数。max-age=0表示不缓存文档。</p>
<p><code>Expires: Fri, 05 Jul 2017, 12:00:00 GMT</code>表示文档绝对过期时间。<strong>不推荐使用Expires</strong>，HTTP设计者后来任务，由于服务器之间的时间不同步或不正确，会导致文档新鲜度计算错误。</p>
<p>如果源服务器希望缓存严格遵守过期时间，可以在加<code>Cache-Control: must-revalidate</code>的HTTP首部。<code>Cache-Control: must-revalidate</code>响应告诉缓存，在事先没有跟源服务器再验证之前，不能提供这个对象的过期副本。缓存仍然可以提供新鲜的副本。如果缓存进行must-revalidate新鲜度是，源服务器不可用，缓存必须返回一条Gateway Timeout从错误。</p>
<h2 id="缓存命中"><a href="#缓存命中" class="headerlink" title="缓存命中"></a>缓存命中</h2><p>缓存命中、未命中和再验证：<br><img src="http://www.processon.com/chart_image/597c0011e4b06e43d2d653b8.png" alt="HTTP Cache Hit"></p>
<p>缓存命中率</p>
<p>由缓存缓存提供服务的请求所占的比例成为称为缓存命中率(cache hit rate)。命中率在0到1之间，0表示缓存全部未命中，1表示缓存全部命中。缓存服务提供者希望缓存的命中是100%，而实际的缓存命中率与缓存大小，缓存内容变化，请求者兴趣相似度等因素相关。</p>
<h2 id="缓存新鲜度"><a href="#缓存新鲜度" class="headerlink" title="缓存新鲜度"></a>缓存新鲜度</h2><h3 id="文档过期"><a href="#文档过期" class="headerlink" title="文档过期"></a>文档过期</h3><p>就像牛奶过期一样，文档也有过期时间。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Content-Type</span>: text/plain</div><div class="line"><span class="attribute">Cache-Control</span>: max-age=484200</div></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Content-Type</span>: text/plain</div><div class="line"><span class="attribute">Expires</span>: Fri, 05 Jul 2017, 12:00:00 GMT</div></pre></td></tr></table></figure>
<p><code>Cache-Control: max-age=484200</code>是一个相对过期时间，max-age定义了文档的最大使用期，从第一次生成文档到文档不再新鲜为止，以秒为单位。</p>
<p><code>Expires:Fri, 05 Jul 2017, 12:00:00 GMT</code>是一个绝对过期时间，如果过期时间已经过了，则文档不再新鲜。该首部要<strong>时钟同步</strong>。</p>
<h3 id="服务器再验证"><a href="#服务器再验证" class="headerlink" title="服务器再验证"></a>服务器再验证</h3><p>缓存文档过期并不意味着该副本与服务器文档不一致，只是意味着要与源服务器进行再验证。</p>
<ul>
<li>如果再验证内容发生了变化，缓存获取新的副本，替换过期副本</li>
<li>如果再验证内容没有发生变化，缓存只需要获取新的首部，对缓存的副本的首部进行更新</li>
</ul>
<p>条件再验证HTTP首部：</p>
<table>
<thead>
<tr>
<th>Header</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>If-Modify-Since: <date></date></td>
<td>如果从指定日期之后文档被修改过了，就执行该请求。可以与Last-Modified服务器响应首部配合使用，只有在内容被修改后，才去获取新的内容</td>
</tr>
<tr>
<td>If-None-Match: <tags></tags></td>
<td>服务器可以为文档提供特殊的标签，而不是将其与最近修改时间相匹配，这些标签就像序列号一样</td>
</tr>
</tbody>
</table>
<p>If-Modify-Since: Date再验证:</p>
<ul>
<li>如果自指定日期后，文档被修改了，If-Modify-Since条件为真，源服务器会返回成功的响应，包含新的过期首部和新文档实体</li>
<li>如果自指定日期后，文档未被修改，If-Modify-Since条件为假，源服务器会返回一个304 Not Modified的响应，不包含文档实体内容</li>
</ul>
<p><img src="http://www.processon.com/chart_image/597c3916e4b06e43d2d6618c.png" alt=""></p>
<p>If-None-Match: Tags</p>
<p>有些情况下，仅使用最后修改时间是不够的。</p>
<ul>
<li>文档被周期性的重写，最后修改时间发生变化，而内容未改变</li>
<li>服务器无法判定最后修改时间</li>
</ul>
<p>HTTP允许用户对实体打标签，进行标识。</p>
<p><img src="http://www.processon.com/chart_image/597c40b1e4b06b35d2fa3f2e.png" alt=""></p>
<p>什么时候使用最后修改时间和标签验证？</p>
<p>如果服务器返回了ETag首部，客户端必须使用标签验证。如果服务器只返回了Last-Modified首部，客户端可以使用最后修改时间验证。</p>
<h3 id="新鲜度计算算法"><a href="#新鲜度计算算法" class="headerlink" title="新鲜度计算算法"></a>新鲜度计算算法</h3><p>为了分辨文档是否新鲜，需要计算两个值，文档的使用期(age)和文档的新鲜生存期(freshness lifetime)。如果文档使用期小于文档新鲜生存期，则文档是新鲜的。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">is_fresh_enough = <span class="keyword">True</span> <span class="keyword">if</span> age &lt; freshness_lifetime</div></pre></td></tr></table></figure>
<h4 id="使用期"><a href="#使用期" class="headerlink" title="使用期"></a>使用期</h4><p>使用期包含了网络传输时间和文档在缓存的停留时间。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apparent_time = time_got_response - date_header_value</div><div class="line">corrent_apparent_time = max(<span class="number">0</span>, apparent_time)</div><div class="line">age_when_document_arrived_at_our_cache = corrent_apparent_time</div><div class="line"></div><div class="line">how_long_copy_has_been_in_our_cache = current_time - got_response_time</div><div class="line"></div><div class="line">age = age_when_document_arrived_at_our_cache + how_long_copy_has_been_in_our_cache</div></pre></td></tr></table></figure>
<p>基于Date首部计算apparent使用期</p>
<p>apparen时间：</p>
<p>apparent时间等于获得响应时间减去服务器发送文档时间：</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apparent_time = time_got_response - date_header_value</div></pre></td></tr></table></figure>
<p>为了防止由于服务器时间不同步导致apparent_time为负，进行时间修正：</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apparent_time = max(<span class="number">0</span>, apparent_time)</div><div class="line">age_when_document_arrived_at_our_cache = apparent_time</div></pre></td></tr></table></figure>
<p>对网络时延对补偿：</p>
<p><strong>如果文档在网络或服务器中阻塞了很长时间，相对使用期的计算可能会极大的低估文档使用期。缓存知道文档请求时间，以及文档到达时间。HTTP/1.1会在这些网络延迟上加上整个网络时延，一遍对其进行保守校正。这个从缓存到服务器到缓存高估了服务器到缓存延迟，它是保守的。如果出错，只会使文档看起来比实际使用期要老，并会引发不必要的验证。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">response_delay_estimate = time_got_response - time_issued_request</div><div class="line">age_when_document_arrived_at_our_cache = apparent_time + response_delay_estimate</div></pre></td></tr></table></figure>
<blockquote>
<p>Note:该时延补偿会导致最后计算文档使用期大于实际的文档使用期。apparent_time是包含网络时延的，对网络时延补偿是否必要？在服务器负载较高，对服务器的处理时间进行补偿倒是很有必要。</p>
</blockquote>
<p>缓存停留时间：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">how_long_copy_has_been_in_our_cache = current_time - got_response_time</div></pre></td></tr></table></figure>
<p><img src="http://www.processon.com/chart_image/597c52a3e4b06e43d2d66a4e.png" alt=""></p>
<h4 id="新鲜生存期"><a href="#新鲜生存期" class="headerlink" title="新鲜生存期"></a>新鲜生存期</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_server_freshness_limit</span><span class="params">(**kwargs)</span>:</span></div><div class="line">	heuristic = <span class="keyword">False</span></div><div class="line">	server_freshness_limit = default_cache_min_lifetime</div><div class="line">    <span class="keyword">if</span> max_age_value_set:</div><div class="line">    	server_freshness_limit = max_age_value_set</div><div class="line">    <span class="keyword">elif</span> expires_value_set:</div><div class="line">   		server_freshness_limit = expires_value_set - date_value</div><div class="line">    <span class="keyword">elif</span> last_modified_value_set:</div><div class="line">    	time_since_last_modify = max(<span class="number">0</span>, date_value - last_modified_value)</div><div class="line">        server_freshness_limit = int(time_since_last_modify*lm_factor)</div><div class="line">        heuristic = <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">    	server_freshness_limit = default_cache_min_lifetime</div><div class="line">        heuristic = <span class="keyword">True</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> heuristic:</div><div class="line">    	<span class="keyword">if</span> server_freshness_limit &gt; default_cache_max_lifetime:</div><div class="line">        	server_freshness_limit = default_cache_max_lifetime</div><div class="line">        <span class="keyword">if</span> server_freshness_limit &lt; default_cache_min_lifetime:</div><div class="line">        	server_freshness_limit = default_cache_min_lifetime</div><div class="line">            </div><div class="line">	<span class="keyword">return</span> server_freshness_limit</div></pre></td></tr></table></figure>
<p>LM-factor算法计算新鲜周期</p>
<ul>
<li>如果已缓存文档最后一次修改发生在很久以前，它可能是一份稳定的文档，不会突然发生变化，因此将其汲取保存在缓存中比较安全</li>
<li>如果已缓存的文档最近被修改过，就说明它很可能会频繁发生变化，因此在与服务器再验证之前，只应该将其缓存很短一段时间</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">time_since_modify = max(<span class="number">0</span>, date_value - server_last_modified)</div><div class="line">server_freshness_limit = time_since_modify * lm_factor</div></pre></td></tr></table></figure>
<p><img src="http://www.processon.com/chart_image/597c9f3be4b06e43d2d6757c.png" alt=""></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>缓存相关的HTTP头部：</p>
<table>
<thead>
<tr>
<th>Header</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cache-Control</td>
<td>缓存控制</td>
</tr>
<tr>
<td>Expires</td>
<td>过期绝对时间</td>
</tr>
<tr>
<td>If-Modify-Since</td>
<td>从某个时间开始文档是否发生改变</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>文档的标签是否发生改变</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>最后修改时间</td>
</tr>
<tr>
<td>ETag</td>
<td>文档标签</td>
</tr>
</tbody>
</table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified</a></li>
<li><a href="https://tools.ietf.org/html/rfc7234" target="_blank" rel="external">rfc7234  Hypertext Transfer Protocol (HTTP/1.1): Caching</a></li>
<li><a href="HTTP Cache-Control Extensions for Stale Content">rfc5861 HTTP Cache-Control Extensions for Stale Content</a></li>
<li><a href="https://www.mnot.net/cache_docs/" target="_blank" rel="external">Caching Tutorial</a></li>
<li><a href="https://redbot.org/" target="_blank" rel="external">redbot</a>, a tool to check your cache-related HTTP headers.</li>
<li><a href="https://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="external">Hypertext Transfer Protocol – HTTP/1.1</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缓存是某个资源(或文档)的副本。对于私有缓存，可以服务同一个客户端的对同一个资源多次的请求，比如浏览器缓存。对于共享缓存(或代理缓存)，可以服务多个客户端对于同一个资源的请求，比如CDN。为什么需要缓存，缓存有哪些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少网络延迟，更快的加载内
    
    </summary>
    
    
      <category term="cache" scheme="http://blog.hotbaby.org/tags/cache/"/>
    
      <category term="HTTP" scheme="http://blog.hotbaby.org/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>OAuth</title>
    <link href="http://blog.hotbaby.org/2017/07/19/untitled-1499683380864/"/>
    <id>http://blog.hotbaby.org/2017/07/19/untitled-1499683380864/</id>
    <published>2017-07-19T15:46:36.000Z</published>
    <updated>2017-08-13T16:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>OAuth客户端使用一个访问令牌(access token)来访问受保护的资源，其中访问令牌包含了特殊作用域(specific scope), 生命周期，和其他的访问属性。访问令牌由授权服务器在资源拥有者授权之后颁发(issue)。客户端通过访问令牌资源服务器上受保护资源。</p>
<p>比如，一个终端用户(resource-owner)可以授权打印服务器(client)访问他的存储在图片分享服务(resource server)上的受保护的图片，但不用与打印服务器分享他的用户名和密码。他可以授权图片分享服务(authorization server)颁发一个特殊的证书(access token).</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h2><table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>resource owner</td>
<td>一个能授权访问受保护资源的实体</td>
</tr>
<tr>
<td>resource server</td>
<td>托管受保护资源的服务器，能处理通过访问令牌访问受保护资源的请求</td>
</tr>
<tr>
<td>client</td>
<td>代表资源拥有者发起访问受保护资源的请求的应用程序</td>
</tr>
<tr>
<td>authorization server</td>
<td>在资源拥有者认证、授权之后，能够颁发访问令牌给客户端的服务器</td>
</tr>
</tbody>
</table>
<h2 id="Protocol-Flow"><a href="#Protocol-Flow" class="headerlink" title="Protocol Flow"></a>Protocol Flow</h2><p><img src="https://hotbaby.org/images/1500477626596.png" alt="Abstract Protocol Flow"></p>
<h2 id="Authorization-Grant"><a href="#Authorization-Grant" class="headerlink" title="Authorization Grant"></a>Authorization Grant</h2><p>授权grant是一个证书表示资源拥有者已经授权，客户端可以用授权grant获取访问令牌。该规范定义4种授权类型：</p>
<ul>
<li>authorization code</li>
<li>implicit</li>
<li>resource owner password credentials</li>
<li>client credentials</li>
</ul>
<h2 id="Access-Token"><a href="#Access-Token" class="headerlink" title="Access Token"></a>Access Token</h2><p>访问令牌是一种证书用来访问受保护的资源。一个访问令牌就是认证服务器颁发给客户端的字符串。令牌包含了特殊作用域，过期时间，授权的资源拥有者等信息。</p>
<h2 id="Refresh-Token"><a href="#Refresh-Token" class="headerlink" title="Refresh Token"></a>Refresh Token</h2><p>刷新令牌也是一个证书用来获取访问令牌。刷新令牌是认证服务器发放给客户端的，在当访问令牌不可用或过期时，用来获取新的访问令牌。</p>
<p>刷新令牌是资源资源拥有者授权给客户端认证码。与访问令牌不同，刷新令牌只能与认证服务器通信，不能从资源服务器获取资源。</p>
<p><img src="http://processon.com/chart_image/59660f76e4b09c8a2926274f.png" alt="Refreshing an Expired Access Token"></p>
<h1 id="Client-Registration"><a href="#Client-Registration" class="headerlink" title="Client Registration"></a>Client Registration</h1><p>在使用OAuth协议之前，客户端需要在认证服务器注册应用。</p>
<p>客户端注册是让认证服务器能够识别、信任客户端，其中包括客户端类型，重定向URI等。</p>
<h2 id="Client-Types"><a href="#Client-Types" class="headerlink" title="Client Types"></a>Client Types</h2><p>OAuth定义了两种客户端类型</p>
<ul>
<li>confidential - 客户端能够管理证书的机密性</li>
<li>public - 客户端不能管理证书的机密性</li>
</ul>
<h2 id="Client-Identifier"><a href="#Client-Identifier" class="headerlink" title="Client Identifier"></a>Client Identifier</h2><p>认证服务器给已注册的客户端颁发一个客户端标识。对于认证服务器，客户端标识是唯一的。</p>
<h2 id="Client-Authentication"><a href="#Client-Authentication" class="headerlink" title="Client Authentication"></a>Client Authentication</h2><p>如果客户端类型是confidential, 客户端和认证服务器建立一个客户端认证方法。Confidential客户端会向认证服务器声明它支持证书，比如密码或公私钥对。</p>
<h1 id="Obtaining-Authorization"><a href="#Obtaining-Authorization" class="headerlink" title="Obtaining Authorization"></a>Obtaining Authorization</h1><p>在请求访问令牌之前，客户端先要获取资源拥有者的授权。OAuth定义了4种授权类型: authorization code, implicit, resource owner password credential, 和client credentials.</p>
<h2 id="Authorization-Code-Grant"><a href="#Authorization-Code-Grant" class="headerlink" title="Authorization Code Grant"></a>Authorization Code Grant</h2><p>授权码授权类型用来获取访问令牌和刷新令牌。</p>
<p>认证码获取流程:</p>
<p><img src="https://hotbaby.org/images/1500478492502.png" alt="Authorization Code Flow"></p>
<h3 id="Authorization-Request"><a href="#Authorization-Request" class="headerlink" title="Authorization Request"></a>Authorization Request</h3><p><code>Content-Type: application/x-www-form-urlencoded</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>response_type</td>
<td><strong>REQUIRED</strong>该值必须设置为”code”</td>
</tr>
<tr>
<td>client_id</td>
<td><strong>REQUIRED</strong>注册的应用的id</td>
</tr>
<tr>
<td>redirect_uri</td>
<td><strong>OPTIONAL</strong>重定向URI，成功获取授权码后重定向到oauth客户端的URI</td>
</tr>
<tr>
<td>scope</td>
<td><strong>OPTIONAL</strong>作用域</td>
</tr>
<tr>
<td>state</td>
<td><strong>RECOMMENDED</strong>客户端用来管理请求、回调状态的值。认证服务器的重定向到UA时，会包含这个值。<strong>这个参数应该用来防止扩展请求伪造</strong></td>
</tr>
</tbody>
</table>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/o/authorize/?response_type=code&amp;client_id=wt6Pvm2s3vbb8RPE7nlPlugwaMnj58UhFpk8bCPp&amp;redirect_uri=http%3A%2F%2Flocalhost%3A8000%2Foauth%2Fauthorized%2F</span> HTTP/1.0</div><div class="line"><span class="attribute">Host</span>: localhost:8000</div><div class="line"><span class="attribute">Connection</span>: close</div><div class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</div><div class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36</div><div class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, sdch, br</div><div class="line"><span class="attribute">Accept-Language</span>: en-US,en;q=0.8</div></pre></td></tr></table></figure>
<p>认证服务器会验证这个请求，保证请求中的所有参数都是有效的。如果请求是有效的，认证服务器需要资源拥有者授权。如果资源拥有者授权成功，授权服务器根据<code>redirect_uri</code>返回给UA一个重定向响应。</p>
<h3 id="Authorization-Response"><a href="#Authorization-Response" class="headerlink" title="Authorization Response"></a>Authorization Response</h3><p><code>Content-Type: application/x-www-form-urlencoded</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>code</td>
<td><strong>REQUIRED</strong>认证服务器生成的授权码，为了防止泄露的危险，授权码必须在很短的时间过期。授权码生存期推荐为10min.客户端只能使用一次授权码。授权码与客户端id,重定向URI绑定</td>
</tr>
<tr>
<td>state</td>
<td><strong>REQUIRED</strong>如果客户端请求中包含state,授权服务器必须要返回该值</td>
</tr>
</tbody>
</table>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0 <span class="number">302</span> Found</div><div class="line"><span class="attribute">Date</span>: Tue, 18 Jul 2017 04:12:00 GMT</div><div class="line"><span class="attribute">Server</span>: WSGIServer/0.1 Python/2.7.9</div><div class="line"><span class="attribute">X-Frame-Options</span>: SAMEORIGIN</div><div class="line"><span class="attribute">Access-Control-Allow-Origin</span>: *</div><div class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</div><div class="line"><span class="attribute">Location</span>: http://localhost:8000/oauth/authorized/?code=x1yxsYhAJ23pXNMXej4tB13dvMFTov</div><div class="line"><span class="attribute">Vary</span>: Cookie</div></pre></td></tr></table></figure>
<h4 id="Error-Response"><a href="#Error-Response" class="headerlink" title="Error Response"></a>Error Response</h4><p><code>Conent-Type: application/x-www-form-urlencoded</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>error</td>
<td><strong>REQUIRED</strong></td>
</tr>
<tr>
<td>error_description</td>
<td><strong>OPTIONAL</strong></td>
</tr>
<tr>
<td>error_uri</td>
<td><strong>OPTIONAL</strong></td>
</tr>
<tr>
<td>state</td>
<td><strong>REQUIRED</strong></td>
</tr>
</tbody>
</table>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">302</span> Found</div><div class="line"><span class="attribute">Location</span>: https://client.example.com/cb?error=access_denied&amp;state=xyz</div></pre></td></tr></table></figure>
<h3 id="Access-Token-Request"><a href="#Access-Token-Request" class="headerlink" title="Access Token Request"></a>Access Token Request</h3><p><code>Conent-Type: application/x-www-form-urlencoded</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>grant_type</td>
<td><strong>REQUIRED</strong>该值必须设置“authorization_code”</td>
</tr>
<tr>
<td>code</td>
<td><strong>REQUIRED</strong>授权服务器返回的code</td>
</tr>
<tr>
<td>redirect_uri</td>
<td><strong>REQUIRED</strong>重定向URI</td>
</tr>
<tr>
<td>client_id</td>
<td><strong>REQUIRED</strong>注册应用的ID</td>
</tr>
</tbody>
</table>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/o/token/</span> HTTP/1.0</div><div class="line"><span class="attribute">Host</span>: localhost:8000</div><div class="line"><span class="attribute">Connection</span>: close</div><div class="line"><span class="attribute">Content-Length</span>: 183</div><div class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</div><div class="line"><span class="attribute">Accept</span>: */*</div><div class="line"><span class="attribute">User-Agent</span>: python-requests/2.18.1</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=authorization_code&amp;code=x1yxsYhAJ23pXNMXej4tB13dvMFTov&amp;redirect_uri=http%3A%2F%2Flocalhost%3A8000%2Foauth%2Fauthorized%2F&amp;client_id=wt6Pvm2s3vbb8RPE7nlPlugwaMnj58UhFpk8bCPp</span></div></pre></td></tr></table></figure>
<p>认证服务器必须要验证客户端的请求</p>
<ul>
<li>对于confidential客户端，需要客户端认证</li>
<li>如果客户端包含认证信息，认证客户端</li>
<li>验证授权码是否有效</li>
<li>验证redirect_uri是否证券</li>
</ul>
<h3 id="Access-Token-Response"><a href="#Access-Token-Response" class="headerlink" title="Access Token Response"></a>Access Token Response</h3><p>如果获取访问令牌的请求是有效的而且认证通过，认证服务器需要发放访问令牌和可选的刷新令牌。如果请求是无效的或认证失败，需要返回一个错误响应。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Date</span>: Tue, 18 Jul 2017 04:12:00 GMT</div><div class="line"><span class="attribute">Server</span>: WSGIServer/0.1 Python/2.7.9</div><div class="line"><span class="attribute">X-Frame-Options</span>: SAMEORIGIN</div><div class="line"><span class="attribute">Content-Type</span>: application/json</div><div class="line"><span class="attribute">Pragma</span>: no-cache</div><div class="line"><span class="attribute">Cache-Control</span>: no-store</div><div class="line"></div><div class="line"><span class="python">&#123;<span class="string">"access_token"</span>: <span class="string">"4C1gRp2TfYKN0tO45fqa6BkFZxTJNU"</span>, <span class="string">"token_type"</span>: <span class="string">"Bearer"</span>, <span class="string">"expires_in"</span>: <span class="number">36000</span>, <span class="string">"refresh_token"</span>: <span class="string">"oZX6XtV2OGSVRnvyOoa7qerWddOPKw"</span>, <span class="string">"scope"</span>: <span class="string">"read write"</span>&#125;</span></div></pre></td></tr></table></figure>
<h1 id="Refreshing-an-Access-Token"><a href="#Refreshing-an-Access-Token" class="headerlink" title="Refreshing an Access Token"></a>Refreshing an Access Token</h1><p>如果认证服务器向客户端颁发了刷新令牌，客户端可以使用刷新令牌更新访问令牌。</p>
<p><code>Content-Type: application/x-www-form-urlencoded</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>grant_type</td>
<td><strong>REQUIRED</strong>该值必须设置为”refresh_token”</td>
</tr>
<tr>
<td>refresh_token</td>
<td><strong>REQUIRED</strong>认证服务器颁发的刷新令牌</td>
</tr>
<tr>
<td>scope</td>
<td><strong>OPTIONAL</strong></td>
</tr>
</tbody>
</table>
<p>刷新令牌是长期存在证书用来更新访问令牌，刷新令牌必须要与客户端id绑定。此外，客户端必须向认证服务器提供认证信息。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/o/token/</span> HTTP/1.0</div><div class="line"><span class="attribute">Host</span>: localhost:8000</div><div class="line"><span class="attribute">Connection</span>: close</div><div class="line"><span class="attribute">Content-Length</span>: 69</div><div class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</div><div class="line"><span class="attribute">Accept</span>: */*</div><div class="line"><span class="attribute">User-Agent</span>: python-requests/2.18.1</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"><span class="attribute">Authorization</span>: Basic d3Q2UHZtMnMzdmJiOFJQRTdubFBsdWd3YU1uajU4VWhGcGs4YkNQcDpWcUF3NDlwb3VXc0lUVU1OcWFrdzczQ0NSRVZzclMyRWd5SG9WeVJnekpWNWRlWnNKQUNBeVdkeEFJMXZRc2RaZk1JQmlCRlRFeUR5YUkyeTJJcU1vR3JEbkFNWE5ITWd4TFRJUDIxRXhIR0tkUmNTVlJ5RjRxOHA5STR5OWhqVQ==</div><div class="line"></div><div class="line"><span class="undefined">grant_type=refresh_token&amp;refresh_token=oZX6XtV2OGSVRnvyOoa7qerWddOPKw</span></div></pre></td></tr></table></figure>
<p>Response:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Date</span>: Tue, 18 Jul 2017 06:47:50 GMT</div><div class="line"><span class="attribute">Server</span>: WSGIServer/0.1 Python/2.7.9</div><div class="line"><span class="attribute">X-Frame-Options</span>: SAMEORIGIN</div><div class="line"><span class="attribute">Content-Type</span>: application/json</div><div class="line"><span class="attribute">Pragma</span>: no-cache</div><div class="line"><span class="attribute">Cache-Control</span>: no-store</div><div class="line"></div><div class="line"><span class="python">&#123;<span class="string">"access_token"</span>: <span class="string">"gebkQX71vIwmksTsvleRKMzpdysLHY"</span>, <span class="string">"token_type"</span>: <span class="string">"Bearer"</span>, <span class="string">"expires_in"</span>: <span class="number">36000</span>, <span class="string">"refresh_token"</span>: <span class="string">"CbpaNXAqyexTQOuCvQf1RUoEN2EZeX"</span>, <span class="string">"scope"</span>: <span class="string">"read write"</span>&#125;</span></div></pre></td></tr></table></figure>
<h1 id="Accessing-Protected-Resources"><a href="#Accessing-Protected-Resources" class="headerlink" title="Accessing Protected Resources"></a>Accessing Protected Resources</h1><p>客户端可以同访问访问资源服务器受保护的资源。资源服务器必须要验证访问令牌，保证访问令牌没有过期，并且其作用域能覆盖此资源。</p>
<h2 id="Access-Token-Types"><a href="#Access-Token-Types" class="headerlink" title="Access Token Types"></a>Access Token Types</h2><p>“bearer”令牌类型，参考<a href="https://tools.ietf.org/html/rfc6750" target="_blank" rel="external">RFC6750</a></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/resource/1</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: example.com</div><div class="line"><span class="attribute">Authorization</span>: Bearer mF_9.B5f-4.1JqM</div></pre></td></tr></table></figure>
<p>“mac”令牌类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /resource/1 HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Authorization: MAC id="h480djs93hd8",</div><div class="line">               nonce="274312:dj83hs9s",</div><div class="line">               mac="kDZvddkndxvhGRXZhvuDjEWhGeE="</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://oauth.net/2/" target="_blank" rel="external">https://oauth.net/2/</a></li>
<li><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="external">https://tools.ietf.org/html/rfc6749</a></li>
<li><a href="https://github.com/evonove/django-oauth-toolkit" target="_blank" rel="external">https://github.com/evonove/django-oauth-toolkit</a></li>
<li><a href="https://oauth.net/articles/authentication/" target="_blank" rel="external">https://oauth.net/articles/authentication/</a></li>
<li><a href="https://www.oauth.com" target="_blank" rel="external">https://www.oauth.com</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OAuth客户端使用一个访问令牌(access token)来访问受保护的资源，其中访问令牌包含了特殊作用域(specific scope), 生命周期，和其他的访问属性。访问令牌由授权服务器在资源拥有者授权之后颁发(issue)。客户端通过访问令牌资源服务器上受保护资源。
    
    </summary>
    
    
      <category term="OAuth" scheme="http://blog.hotbaby.org/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>Python Metaclass</title>
    <link href="http://blog.hotbaby.org/2017/07/18/untitled-1500307428319/"/>
    <id>http://blog.hotbaby.org/2017/07/18/untitled-1500307428319/</id>
    <published>2017-07-18T14:57:26.000Z</published>
    <updated>2017-08-23T01:42:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>[Metaclasses] are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don’t (the people who actually need them know with certainty that they need them, and don’t need an explanation about why).</em> The Python core developer Time Peters said.</p>
<p>元类是创建类的类。新风格(new-style)类是type类的实例。元类是type类的派生类，通过重载type类的<code>__new__</code>和<code>__init__</code>方法，重新定义类创建协议，来实现类创建的定制化。</p>
<h2 id="元类模型"><a href="#元类模型" class="headerlink" title="元类模型"></a>元类模型</h2><p>(对象)实例是通过类创建，类是通过type类创建，元类是type类的派生类。</p>
<ul>
<li>类型(自定义)是通过type类或type派生元类创建</li>
<li>元类是type类的派生类</li>
<li>用户自定义类是type类的实例</li>
<li>用户自定义类可以生成自己的实例</li>
</ul>
<h3 id="类声明协议"><a href="#类声明协议" class="headerlink" title="类声明协议"></a>类声明协议</h3><p>Python解释器在类声明语句结束时，调用type类型创建，<code>class = type(classname, superclasses, attributedict)</code>。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">type.__new__(meta, classname, superclasses, attributedict)</div><div class="line">type.__init__(cls, classname, superclasses, attributedict)</div></pre></td></tr></table></figure>
<h2 id="声明元类"><a href="#声明元类" class="headerlink" title="声明元类"></a>声明元类</h2><p>Py3与Py2声明元类的方式不一样：</p>
<p>Py3声明元类</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Metaclass</span><span class="params">(type)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(meta, classname, superclasses, attributedict)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> type(classname, superclasses, attributedict)</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, classname, superclasses, attributedict)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">pass</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span><span class="params">(object, metaclass=Metaclass)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>Py2声明元类</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Metaclass</span><span class="params">(type)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(meta, classname, superclasses, attributedict)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> type(classname, superclasses, attributedict)</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, classname, superclasses, attributedict)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">pass</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    __metaclass__ = Metaclass</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="继承和实例"><a href="#继承和实例" class="headerlink" title="继承和实例"></a>继承和实例</h2><ul>
<li>元类继承于type类</li>
<li>元类的声明可以被派生类继承</li>
<li>元类的属性不能被类的实例继承</li>
<li>元类的属性可以被类获取</li>
</ul>
<p><strong>元类继承于type类</strong></p>
<p>元类重载type类的<code>__new__</code>和<code>__init__</code>方法，定制类的创建和初始化。</p>
<p><strong>元类的声明可以被派生类继承</strong></p>
<p><strong>元类的属性不能被类实例继承</strong></p>
<p>类是元类的实例，元类的行为可以被类访问，当类不能被类的实例访问。</p>
<p><strong>元类的属性可以被类获取</strong></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>Python继承算法</strong></p>
<ol>
<li>对于一个实例，先搜索这个实例，再搜索实例的类，再搜索超类<br> a. 先搜索实例的<code>__dict__</code><br> b. 再搜索该实例的类的<code>__mro__</code>对应类的<code>__dict__</code></li>
<li>对于一个类，先搜索类，再搜索超类，再搜索元类<br> a. 根据<code>__mro__</code>搜索类的<code>__dict__</code><br> b. 再搜索元类的<code>__dict__</code></li>
<li>规则1和2中，再b阶段中，数据描述的优先级高</li>
<li>规则1和2中，对于内置的运算符，跳过a阶段</li>
</ol>
<p><strong>数据描述符继承算法</strong></p>
<p>对于定义了<code>__set__</code>拦截赋值的描述符就是数据描述符。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, ins, _type)</span>:</span></div><div class="line"><span class="meta">... </span>            print(<span class="string">'call D.__get__'</span>)</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, ins, value)</span>:</span></div><div class="line"><span class="meta">... </span>            print(<span class="string">'call D.__set__'</span>)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    d = D()</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins = Dummy()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d</div><div class="line">call D.__get__</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d = <span class="string">'spam'</span></div><div class="line">call D.__set__</div></pre></td></tr></table></figure>
<p>未定义<code>__set__</code>的描述符</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, ins, value)</span>:</span></div><div class="line"><span class="meta">... </span>            print(<span class="string">'call D.__get__'</span>)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    d = D()</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins = Dummy()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d</div><div class="line">call D.__get__</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d = <span class="string">'spam'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d</div><div class="line"><span class="string">'spam</span></div></pre></td></tr></table></figure>
<p>Python 的继承算法</p>
<ol>
<li>对于实例I，先搜索实例，再搜索类，再搜索超类<br> a. 根据类的<code>__mro__</code>搜索超类的<code>__dict__</code><br> b. If 如果在a阶段发现了数据描述，调用该数据描述，完成后退出<br> c. Else 返回该实例<code>__dict__</code>中的值<br> d. Else 调用非数据描述符，并放回结果</li>
<li>对于类C，搜索类，再搜索超类，再搜索元类<br> a. 搜索类的<code>__mro__</code>依次搜索类的<code>__dict__</code><br> b. If 如果在a阶段发现了数据描述符，调用该数据描述符，完成后退出<br> c. Else 返回该类<code>__dict__</code>中值<br> d. Else 调用非数据描述符，返回结果</li>
</ol>
<blockquote>
<p>Note, 数据描述符的优先级 &gt; 普通属性 &gt; 非数据描述符</p>
</blockquote>
<h2 id="元类与类装饰器"><a href="#元类与类装饰器" class="headerlink" title="元类与类装饰器"></a>元类与类装饰器</h2><p>TODO</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>django ORM</p>
<p>ripozo API</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><em>Learning Python 5th Edition</em></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;[Metaclasses] are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don’t (the people 
    
    </summary>
    
      <category term="Python" scheme="http://blog.hotbaby.org/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python  Descriptor</title>
    <link href="http://blog.hotbaby.org/2017/07/10/Python-descriptor/"/>
    <id>http://blog.hotbaby.org/2017/07/10/Python-descriptor/</id>
    <published>2017-07-10T15:58:38.000Z</published>
    <updated>2017-08-23T01:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个对象定义了以下任意方法，这个对象就是一个描述符。给描述符下个定义，描述符就是绑定了行为属性的对象。</p>
<p><code>object.__get__(self, instance, owner)</code></p>
<p><code>object.__set__(self, instance, value)</code></p>
<p><code>object.__delete__(self, instance)</code></p>
<p>属性访问的默认行为就是从一个对象字典中获取、设置和删除属性。比如，<code>a.x</code>首先会搜索<code>a.__dict__[&#39;x&#39;]</code>，其次<code>type(a).__dict__[&#39;x&#39;]</code>，最后所有<code>type(a)</code>的元类。<strong>如果要查找的值一个包含描述器方法的对象，Python会用调用描述器方法代替默认行为。</strong></p>
<blockquote>
<p>Note:只有new-style class会调用描述符的对象的方法。</p>
</blockquote>
<p>描述符是一个强大的通用协议。Python内建的property, staticmethod, classmethod, super背后的实现机制都是描述符协议。</p>
<h2 id="Descriptor-Protocol"><a href="#Descriptor-Protocol" class="headerlink" title="Descriptor Protocol"></a>Descriptor Protocol</h2><p><code>object.__get__(self, ins, _type=None)</code></p>
<p><code>object.__set__(self, ins, value)</code></p>
<p><code>object.__del__(self, ins)</code></p>
<p>如果一个对象包含上面任意一个方法，就可以被看作是一个描述符。如果一个对象定义了<code>__get__</code>和<code>__set__</code>两个方法，该对象可以被看作一个数据描述符，如果一个对象只定义了<code>__get__</code>，该对象就是non-data描述符。</p>
<p><strong>数据描述符与非数据描述符的区别在于，描述符与对象实例entry调用优先级。如果一个实例的字典有一个entry和数据描述符的名字相同，数据描述符的调用的优先级高。如果一个实例有一个entry和非数据描述符的名字相同个，实例entry的调用的优先级高。</strong></p>
<h2 id="Invoking-Descriptors"><a href="#Invoking-Descriptors" class="headerlink" title="Invoking Descriptors"></a>Invoking Descriptors</h2><p><code>obj.d</code>查找obj的字典是否包含d，如果d定义了<code>__get__</code>方法，<code>d.__get__(obj, type(obj))</code>就会被调用。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, key)</span>:</span></div><div class="line">    <span class="string">"Emulate type_getattro() in Objects/typeobject.c"</span></div><div class="line">    v = object.__getattribute__(self, key)</div><div class="line">    <span class="keyword">if</span> hasattr(v, <span class="string">'__get__'</span>):</div><div class="line">        <span class="keyword">return</span> v.__get__(<span class="keyword">None</span>, self)</div><div class="line">    <span class="keyword">return</span> v</div></pre></td></tr></table></figure>
<p>super()返回的对象有一个定制化的<code>__getattribute__</code>方法，用于调用描述符。<code>super(B, self).m</code>先会搜索<code>obj.__class__.__mro__</code>查找基类A，如果是一个数据描述符，则会调用<code>A.__dict__[&#39;m&#39;].__get__(obj, B)</code>，如果是一个非数据描述符，返回结果不会改变。</p>
<h2 id="Built-in-Descriptors"><a href="#Built-in-Descriptors" class="headerlink" title="Built-in Descriptors"></a>Built-in Descriptors</h2><h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span> <span class="keyword">return</span> self.__x</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span><span class="params">(self, value)</span>:</span> self.__x = value</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span><span class="params">(self)</span>:</span> <span class="keyword">del</span> self.__x</div><div class="line">    x = property(getx, setx, delx, <span class="string">"I'm the 'x' property."</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Property</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"Emulate PyProperty_Type() in Objects/descrobject.c"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fget=None, fset=None, fdel=None, doc=None)</span>:</span></div><div class="line">        self.fget = fget</div><div class="line">        self.fset = fset</div><div class="line">        self.fdel = fdel</div><div class="line">        <span class="keyword">if</span> doc <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> fget <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            doc = fget.__doc__</div><div class="line">        self.__doc__ = doc</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="keyword">if</span> self.fget <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"unreadable attribute"</span>)</div><div class="line">        <span class="keyword">return</span> self.fget(obj)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.fset <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"can't set attribute"</span>)</div><div class="line">        self.fset(obj, value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.fdel <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"can't delete attribute"</span>)</div><div class="line">        self.fdel(obj)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getter</span><span class="params">(self, fget)</span>:</span></div><div class="line">        <span class="keyword">return</span> type(self)(fget, self.fset, self.fdel, self.__doc__)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setter</span><span class="params">(self, fset)</span>:</span></div><div class="line">        <span class="keyword">return</span> type(self)(self.fget, fset, self.fdel, self.__doc__)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleter</span><span class="params">(self, fdel)</span>:</span></div><div class="line">        <span class="keyword">return</span> type(self)(self.fget, self.fset, fdel, self.__doc__)</div></pre></td></tr></table></figure>
<h3 id="Staticmethod"><a href="#Staticmethod" class="headerlink" title="Staticmethod"></a>Staticmethod</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethod</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"Emulate PyStaticMethod_Type() in Objects/funcobject.c"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f)</span>:</span></div><div class="line">        self.f = f</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.f</div></pre></td></tr></table></figure>
<h3 id="Classmethod"><a href="#Classmethod" class="headerlink" title="Classmethod"></a>Classmethod</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassMethod</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"Emulate PyClassMethod_Type() in Objects/funcobject.c"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f)</span>:</span></div><div class="line">        self.f = f</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, klass=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> klass <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            klass = type(obj)</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span><span class="params">(*args)</span>:</span></div><div class="line">            <span class="keyword">return</span> self.f(klass, *args)</div><div class="line">        <span class="keyword">return</span> newfunc</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/2/reference/datamodel.html#descriptors" target="_blank" rel="external">https://docs.python.org/2/reference/datamodel.html#descriptors</a></li>
<li><a href="https://docs.python.org/2/howto/descriptor.html" target="_blank" rel="external">https://docs.python.org/2/howto/descriptor.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果一个对象定义了以下任意方法，这个对象就是一个描述符。给描述符下个定义，描述符就是绑定了行为属性的对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;object.__get__(self, instance, owner)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;object.__set
    
    </summary>
    
      <category term="Python" scheme="http://blog.hotbaby.org/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Selenium</title>
    <link href="http://blog.hotbaby.org/2017/07/09/Selenium/"/>
    <id>http://blog.hotbaby.org/2017/07/09/Selenium/</id>
    <published>2017-07-09T14:06:43.000Z</published>
    <updated>2017-07-09T14:06:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>selenium模拟浏览器行为</p>
<p><strong>安装依赖</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install chromium</div><div class="line">$ sudo apt-get install chromedriver</div><div class="line">$ sudo apt-get install python-selenium</div><div class="line">$ sudo pip install selenium</div></pre></td></tr></table></figure>
<p><strong>代码实例</strong></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> click</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</div><div class="line"><span class="keyword">from</span> selenium.webdriver.remote.command <span class="keyword">import</span> Command</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--url', prompt='download URL', default='http://baidu.com', help='The download URL')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        driver = webdriver.Chrome(<span class="string">'./webdrivers/chromedriver'</span>)</div><div class="line"><span class="comment">#         driver = webdriver.PhantomJS('./webdrivers/phantomjs')</span></div><div class="line"></div><div class="line">        driver.get(url)</div><div class="line">        print(driver.title)</div><div class="line"></div><div class="line">        actions = ActionChains(driver)</div><div class="line">        <span class="comment">#resource = driver.page_source.encode('utf-8')</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#filename = '%s.html' % driver.title</span></div><div class="line">        <span class="comment">#with open(filename, 'w+') as f:</span></div><div class="line">        <span class="comment">#    f.write(resource)</span></div><div class="line"></div><div class="line">        <span class="comment"># screenshot</span></div><div class="line"><span class="comment">#         driver.get_screenshot_as_file('%s.png'%driver.title)</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment"># click</span></div><div class="line"><span class="comment">#         news_ele = driver.find_element_by_link_text(u'新闻')</span></div><div class="line"><span class="comment">#         actions.reset_actions()</span></div><div class="line"><span class="comment">#         actions.click(news_ele).perform()</span></div><div class="line"></div><div class="line">        <span class="comment"># save as</span></div><div class="line">        ActionChains(driver).context_click().perform()</div><div class="line">        ActionChains(driver).key_down(Keys.CONTROL).send_keys(<span class="string">'s'</span>).key_up(Keys.CONTROL).perform()</div><div class="line">        sleep(<span class="number">6</span>)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        driver.quit()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    download()</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="external">https://pypi.python.org/pypi/selenium</a></li>
<li><a href="http://phantomjs.org/download.html" target="_blank" rel="external">http://phantomjs.org/download.html</a></li>
<li><a href="https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver" target="_blank" rel="external">https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver</a></li>
<li><a href="http://selenium-python.readthedocs.io/" target="_blank" rel="external">http://selenium-python.readthedocs.io/</a></li>
<li><a href="https://w3c.github.io/webdriver/webdriver-spec.html" target="_blank" rel="external">https://w3c.github.io/webdriver/webdriver-spec.html</a></li>
<li><a href="http://phantomjs.org/page-automation.html" target="_blank" rel="external">http://phantomjs.org/page-automation.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;selenium模拟浏览器行为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
    
      <category term="selenium" scheme="http://blog.hotbaby.org/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python Context</title>
    <link href="http://blog.hotbaby.org/2017/07/09/Python-context/"/>
    <id>http://blog.hotbaby.org/2017/07/09/Python-context/</id>
    <published>2017-07-09T13:52:12.000Z</published>
    <updated>2017-07-21T09:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>上下管理器是一个对象，定义了执行<code>with</code>语句时需要创建的上下文。context manager的<code>__enter__()</code>和<code>__exit__()</code>方法分别在进入、退出<code>with</code>语句时被调用。</p>
<p><code>object.__enter__(self)</code></p>
<p><code>object.__exit__(self, exc_type, exc_value, traceback)</code></p>
<h2 id="with-statement"><a href="#with-statement" class="headerlink" title="with statement"></a>with statement</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">with_stmt ::=  <span class="string">"with"</span> with_item (<span class="string">","</span> with_item)* <span class="string">":"</span> suite</div><div class="line">with_item ::=  expression [<span class="string">"as"</span> target]</div></pre></td></tr></table></figure>
<p><strong>with</strong>语句执行数据流：</p>
<ol>
<li>评估上下文表达式是否包含上下文管理器</li>
<li>加载上下文管理器的<code>__exit__</code>方法</li>
<li>调用上下文管理的<code>__enter__</code>方法</li>
<li>如果target包含在with语句中，将<code>__enter__</code>方法的返回值赋给target</li>
<li>执行suite</li>
<li>调用<code>__exit__()</code>方法</li>
</ol>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mgr = (EXPR)</div><div class="line">exit = type(mgr).__exit__  <span class="comment"># Not calling it yet</span></div><div class="line">value = type(mgr).__enter__(mgr)</div><div class="line">exc = <span class="keyword">True</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    VAR = value  <span class="comment"># Only if "as VAR" is present</span></div><div class="line">    BLOCK</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="comment"># The exceptional case is handled here</span></div><div class="line">    exc = <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exit(mgr, *sys.exc_info()):</div><div class="line">    		<span class="keyword">raise</span></div><div class="line">    <span class="comment"># The exception is swallowed if exit() returns true</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    <span class="comment"># The normal and non-local-goto cases are handled here</span></div><div class="line">    <span class="keyword">if</span> exc:</div><div class="line">        exit(mgr, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<h2 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h2><p>contextlib提供了快速定义支持上下文管理器的函数对象。</p>
<p>定义一个生成器函数，contextmanager装饰后就变成一个支持上下文管理器的函数对象。yield之前语句子在代码块之前被执行，yield之后语句在代码执行完之后被执行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from contextlib import contextmanager</div><div class="line">&gt;&gt;&gt; </div><div class="line">&gt;&gt;&gt; @contextmanager</div><div class="line">... def tag(name):</div><div class="line">...     print('&lt;%s&gt;' % name)</div><div class="line">...     yield</div><div class="line">...     print('&lt;/%s&gt;' % name)</div><div class="line">... </div><div class="line">&gt;&gt;&gt; with tag('h1'):</div><div class="line">...     print('hotbaby')</div><div class="line">... </div><div class="line">&lt;h1&gt;</div><div class="line">hotbaby</div><div class="line">&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h2 id="context-decorator"><a href="#context-decorator" class="headerlink" title="context decorator"></a>context decorator</h2><p>contextmanager是一个函数装饰器，装饰只包含一个yield语句的生成器函数，返回一个支持上下文管理器的函数对象。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">contextmanager</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(*args, **kwds)</span>:</span></div><div class="line">        <span class="keyword">return</span> GeneratorContextManager(func(*args, **kwds))</div><div class="line">    <span class="keyword">return</span> helper</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: 被装饰的生成器函数变成生成器作为参数传递到<strong>GeneratorContextManager</strong>对象中。</p>
</blockquote>
<p>生成器上下文管理器</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorContextManager</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Helper for @contextmanager decorator."""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, gen)</span>:</span></div><div class="line">        self.gen = gen</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self.gen.next()</div><div class="line">        <span class="keyword">except</span> StopIteration:</div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't yield"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">        <span class="keyword">if</span> type <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.gen.next()</div><div class="line">            <span class="keyword">except</span> StopIteration:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't stop"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="comment"># Need to force instantiation so we can reliably</span></div><div class="line">                <span class="comment"># tell if we get the same exception back</span></div><div class="line">                value = type()</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.gen.throw(type, value, traceback)</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't stop after throw()"</span>)</div><div class="line">            <span class="keyword">except</span> StopIteration, exc:</div><div class="line">                <span class="comment"># Suppress the exception *unless* it's the same exception that</span></div><div class="line">                <span class="comment"># was passed to throw().  This prevents a StopIteration</span></div><div class="line">                <span class="comment"># raised inside the "with" statement from being suppressed</span></div><div class="line">                <span class="keyword">return</span> exc <span class="keyword">is</span> <span class="keyword">not</span> value</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="comment"># only re-raise if it's *not* the exception that was</span></div><div class="line">                <span class="comment"># passed to throw(), because __exit__() must not raise</span></div><div class="line">                <span class="comment"># an exception unless __exit__() itself failed.  But throw()</span></div><div class="line">                <span class="comment"># has to raise the exception to signal propagation, so this</span></div><div class="line">                <span class="comment"># fixes the impedance mismatch between the throw() protocol</span></div><div class="line">                <span class="comment"># and the __exit__() protocol.</span></div><div class="line">                <span class="comment">#</span></div><div class="line">                <span class="keyword">if</span> sys.exc_info()[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> value:</div><div class="line">                    <span class="keyword">raise</span></div></pre></td></tr></table></figure>
<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ul>
<li><a href="http://hotbaby.org/python/2/reference/datamodel.html#with-statement-context-managers" target="_blank" rel="external">http://hotbaby.org/python/2/reference/datamodel.html#with-statement-context-managers</a></li>
<li><a href="http://hotbaby.org/python/2/reference/compound_stmts.html#the-with-statement" target="_blank" rel="external">http://hotbaby.org/python/2/reference/compound_stmts.html#the-with-statement</a></li>
<li><a href="http://hotbaby.org/python/2/library/contextlib.html" target="_blank" rel="external">http://hotbaby.org/python/2/library/contextlib.html</a></li>
<li><a href="https://hg.python.org/cpython/file/2.7/Lib/contextlib.py" target="_blank" rel="external">https://hg.python.org/cpython/file/2.7/Lib/contextlib.py</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0343/" target="_blank" rel="external">https://www.python.org/dev/peps/pep-0343/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上下管理器是一个对象，定义了执行&lt;code&gt;with&lt;/code&gt;语句时需要创建的上下文。context manager的&lt;code&gt;__enter__()&lt;/code&gt;和&lt;code&gt;__exit__()&lt;/code&gt;方法分别在进入、退出&lt;code&gt;with&lt;/code&gt;语
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Debug</title>
    <link href="http://blog.hotbaby.org/2017/06/09/Python-debug/"/>
    <id>http://blog.hotbaby.org/2017/06/09/Python-debug/</id>
    <published>2017-06-09T10:09:52.000Z</published>
    <updated>2017-07-21T09:19:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Debug Python程序。</p>
<h2 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h2><h2 id="pyringe"><a href="#pyringe" class="headerlink" title="pyringe"></a>pyringe</h2><p>pdb不支持attch正在运行的Python程序，pyringe很好的解决此问题。此外，pyringe支持代码自省，查看局部变量、全局变量，代码注入，查看线程列表，打印栈帧。</p>
<p>准备环境：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ apt-get  install -y python-dbg gdb</div><div class="line">$ pip install pyringe</div></pre></td></tr></table></figure></p>
<p>调试：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -m pyringe</div><div class="line">$ attach(pid)</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/google/pyringe" target="_blank" rel="external">https://github.com/google/pyringe</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Debug Python程序。&lt;/p&gt;
&lt;h2 id=&quot;pdb&quot;&gt;&lt;a href=&quot;#pdb&quot; class=&quot;headerlink&quot; title=&quot;pdb&quot;&gt;&lt;/a&gt;pdb&lt;/h2&gt;&lt;h2 id=&quot;pyringe&quot;&gt;&lt;a href=&quot;#pyringe&quot; class=&quot;hea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Debian Timezone</title>
    <link href="http://blog.hotbaby.org/2017/06/09/debian-timezone/"/>
    <id>http://blog.hotbaby.org/2017/06/09/debian-timezone/</id>
    <published>2017-06-09T09:20:49.000Z</published>
    <updated>2017-07-21T09:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>dpkg-reconfigure  tzdata</code></p>
<p><strong>Referece</strong></p>
<ul>
<li><a href="https://wiki.debian.org/TimeZoneChanges" target="_blank" rel="external">https://wiki.debian.org/TimeZoneChanges</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;dpkg-reconfigure  tzdata&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referece&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/TimeZoneChanges&quot; tar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python Customization</title>
    <link href="http://blog.hotbaby.org/2017/06/09/Python-customization/"/>
    <id>http://blog.hotbaby.org/2017/06/09/Python-customization/</id>
    <published>2017-06-09T04:20:00.000Z</published>
    <updated>2017-07-21T09:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>object.__new__(cls[, ...])</code></strong></p>
<p><code>object.__new__(cls, *args, **kwargs)</code> Called to create a new instance of class <code>cls.__new__()</code>is <strong>a static method</strong> that take the class as its first argument.The remaining arguments are those passed to the object constructor expression(the call to the class). <strong>The return value of <code>__new__()</code>should be the new object instance(usually an instance of cls).</strong></p>
<p>Typical implementations create a new instance of the class by invoking the superclass’s <code>__new__()</code>method using <code>super(currentclas, cls).__new__(cls[, ...])</code>with appropriate arguments and then modifying the newly-created instance as necessary before returning it.</p>
<p>if <code>__new__()</code> return an instance of cls, then the new instance’s <code>__init__()</code> will be invoked.</p>
<p>if <code>__new__()</code>does not return an instance of cls, then the new instance’s <code>__init__()</code> method will not be invoked.</p>
<p><code>__new__()</code>is intended mainly to allow subclasses of immutable type(like int, str or tuple) to customize instance creation. It is also commonly overridden in custom metaclass in order to customize class creation.</p>
<p><strong>object.<strong>init</strong>(self[,…])</strong></p>
<p><code>object.__init__(self, *args, **kwargs)</code> <strong>Called after the instance has been created</strong> (by <code>__new__()</code>), but before it is returned to the caller. The arguments are those passed to the class constructor expression. If a base class has an <code>__init__()</code>method, the derived class’s <code>__init__()</code>method must explicitly call it to ensure proper initialization of the base class of the instance.</p>
<p><code>__new__()</code>and<code>__init__()</code>work together in constructing objects(<code>__new__()</code>to create it, and <code>__init__()</code>to customize it). <strong>no non-None value may be returned by <code>__init__()</code>; doing so will cause a TypeError to be raised at runtime.</strong></p>
<p><strong>object.<strong>del</strong>(self)</strong></p>
<p>Called when the instance is about to be destroyed. This is also a destructor. If a base class has a <code>__del__()</code> method, the derived class’s <code>__del__()</code>method, must explicitly call it to ensure proper deletion of the base class part of the instance.</p>
<p>总结：</p>
<ul>
<li>作用 <code>object.__new__(cls, *args, **kwargs)</code>用于创建对象实例，<code>object.__init__(self,*args, **kwargs)</code>用于初始化实例</li>
<li>返回值 <code>__new__(cls)</code>返回对象实例，只有当<code>__new__(cls)</code>返回一个对象实例时，<code>__init__(self)</code>才会被调用。<code>__init__(self)</code>返回None，返回值非None，会抛出异常</li>
<li>参数 <code>__new__(cls)</code>是一个静态方法，第一个参数是cls. <code>__init__(self)</code>是一个类方法，第一个参数是对象self</li>
<li>时序 <code>__new__(cls)</code>先与<code>__init(self)__</code>被调用</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/2/reference/datamodel.html#basic-customization" target="_blank" rel="external">https://docs.python.org/2/reference/datamodel.html#basic-customization</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;object.__new__(cls[, ...])&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;object.__new__(cls, *args, **kwargs)&lt;/code&gt; Called to create a new 
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python PyPI Mirror</title>
    <link href="http://blog.hotbaby.org/2017/06/08/Python-pip-mirror/"/>
    <id>http://blog.hotbaby.org/2017/06/08/Python-pip-mirror/</id>
    <published>2017-06-08T06:22:00.000Z</published>
    <updated>2017-08-23T01:43:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>PyPI(Python Package Index)是Python软件仓库。</p>
<p>pip是Python包管理工具，默认使用<code>pypi.python.org</code>作为PyPI的镜像。</p>
<p>pip安装Python软件包经常会出现”链接pypi.python.org失败”。为了优化包的管理，考虑替换<code>pypi.python.org</code>,转而使用国内的PyPI镜像。</p>
<p><strong>PyPI mirror list</strong></p>
<table>
<thead>
<tr>
<th>Mirror</th>
<th>Location</th>
</tr>
</thead>
<tbody>
<tr>
<td>pypi.python.org</td>
<td>San Francisco, California US</td>
</tr>
<tr>
<td>pypi.douban.com</td>
<td>Beijing, Beijing CN</td>
</tr>
<tr>
<td>pypi.fcio.net</td>
<td>Oberhausen, Nordrhein-Westfalen DE</td>
</tr>
</tbody>
</table>
<p><strong>Linux(Debian) 替换PyPI镜像</strong></p>
<p><code>touch ~/.pip/pip.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url = https://pypi.douban.com/simple</div><div class="line">format = columns</div></pre></td></tr></table></figure>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://www.pypi-mirrors.org/" target="_blank" rel="external">https://www.pypi-mirrors.org/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21863043" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21863043</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyPI(Python Package Index)是Python软件仓库。&lt;/p&gt;
&lt;p&gt;pip是Python包管理工具，默认使用&lt;code&gt;pypi.python.org&lt;/code&gt;作为PyPI的镜像。&lt;/p&gt;
&lt;p&gt;pip安装Python软件包经常会出现”链接pyp
    
    </summary>
    
      <category term="Python" scheme="http://blog.hotbaby.org/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
      <category term="PyPI" scheme="http://blog.hotbaby.org/tags/PyPI/"/>
    
  </entry>
  
  <entry>
    <title>Lisp</title>
    <link href="http://blog.hotbaby.org/2017/06/01/Lisp/"/>
    <id>http://blog.hotbaby.org/2017/06/01/Lisp/</id>
    <published>2017-06-01T05:14:00.000Z</published>
    <updated>2017-06-02T04:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>为什么Lisp语言很特别</strong></p>
<p>Lisp语言从诞生的时候就包含9种思想.其中一些我们今天已经习以为常,另一些则刚刚在其他高级语言中出现,至今还有2种是Lisp独有的.按照大众的接受程度,这9种思想依次如下排列:</p>
<ol>
<li>条件结构.现在大家都觉得这是理所当然的,但是Fortran I就没有这个结构,它只有底层机器的goto结构.</li>
<li>函数也是一种数据类型.在Lisp语言中,函数与整数或字符串一样,也属于数据类型的一种.它有自己的字面表示形式(literal representation),能狗存储在变量中,也能当作参数传递.一种数据类型应该有的功能,它都有.</li>
<li>递归.Lisp是第一个支持递归函数的高级语言.</li>
<li>变量的动态类型.在Lisp语言中,所有变量实际上都是指针,所指向的值有类型之分,而变量本身没有.复制变量就是相当于复制指针,而不是复制它们指向的数据.</li>
<li>垃圾回收机制.</li>
<li>程序由表达式组成.Lisp程序是一些表达树的集合,每个表达式都返回一个值.这与Fortran和大多数后来的语言都截然不同,他们的程序都由表达式和语句组成.区分表达式与语句在Fortran I中是自然的,因为它不支持语句嵌套.所以,如果你需要用数学式子计算一个值,那就只有表达式返回这个值,没有其他语法结构可用,否则就无法处理这个值.后来,新的编程语言支持块结构,这种限制当然就不存在了.但是为时已晚,表达式和语句的区分已经根深蒂固.它从Fortran扩散到它们两者的后继语言.</li>
<li>符号类型.符号实际上是一种指针,指向存储在散列表中字符串.所以,比较两个符号是否相等,只要看它们的指针是否一样就可以了,不用逐个字符比较.</li>
<li>代码使用符号和常量组成的树形表示法.</li>
<li>无论什么时候,整个语言都是可用的.Lisp并不真正区分读取,编译期和运行期.你可以在读取期编译或运行代码,也可以在编译期读取和运行代码,还可以在运行期读取或编译代码.在读取期运行代码,使得用户可以重新调整Lisp的语法,在编译期运行代码,则是Lisp宏的工作基础,在运行期编译代码,使得Lisp可以在Emacs这样的程序中充当扩展语言(extension language),在运行期读取代码,使得程序之间可以用S表达式通信,近来XML格式的出现使得这个概念被重新”发明”出来了.</li>
</ol>
<p>Lisp语言刚出现的时候,这些思想与其他编程语言大相径庭,后者的设计思想主要由50年代后期的硬件决定.随着时间流逝,流行的编程语言不断更新换代,语言设计思想逐渐向Lisp靠拢.思想(1)到思想(5)已经被广泛接受,思想(6)开始在主流编程语言中出现,思想(7)在Python语言中有所实现,不过似乎没有专用的语法.</p>
<p>思想(8)可能是最有意思的一点.它与思想(9)只是由于偶然的原因成为Lisp语言的一部分，因为它们不属于麦卡锡的原始构想，是由拉塞尔自行添加的．它们从此使得Lisp语言看上去很古怪，但也成为了这种语言最独一无二的特点．说Lisp语法古怪不是因为它的语法很古怪，而是因为它根本就没有语法，程序直接以解析树(parse tree)的形式表达出来．在其他语言中，这种形式只是经过解析在后台产生，但是Lisp直接采用它作为表达式形式．它由列表构成，而列表则是Lisp的基本数据结构．</p>
<p>用一种语言自己的数据结构来表达该语言是非常强大的功能．思想(8)和思想(9)，意味着你可以写出一种能够自己编程的程序．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;为什么Lisp语言很特别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lisp语言从诞生的时候就包含9种思想.其中一些我们今天已经习以为常,另一些则刚刚在其他高级语言中出现,至今还有2种是Lisp独有的.按照大众的接受程度,这9种思想依次如下排列:&lt;/p&gt;
&lt;ol&gt;
&lt;
    
    </summary>
    
    
      <category term="Lisp" scheme="http://blog.hotbaby.org/tags/Lisp/"/>
    
      <category term="Paul Graham" scheme="http://blog.hotbaby.org/tags/Paul-Graham/"/>
    
  </entry>
  
  <entry>
    <title>Django Database Router</title>
    <link href="http://blog.hotbaby.org/2017/05/17/django-db-router/"/>
    <id>http://blog.hotbaby.org/2017/05/17/django-db-router/</id>
    <published>2017-05-17T11:56:00.000Z</published>
    <updated>2017-07-21T09:21:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>django ORM数据模型配置数据库．</p>
<p>django支持多个数据库，通过django ORM定义数据模型，比如<code>class User(Model)</code>，无法通过<code>class Meta</code>配置管理该数据模型对应的数据库，只能使用默认数据库<code>default</code>．</p>
<p>django <code>ConnectionRouter</code>解决数据模型与数据库映射．</p>
<p><strong>实现DB router</strong></p>
<p><code>db_router.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"></div><div class="line">_logger = logging.getLogger(<span class="string">'django'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseRouter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Database router to control the  models for differrent db.</div><div class="line">    """</div><div class="line"></div><div class="line">    DEFAULT_DB = <span class="string">'default'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_db</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">        db = getattr(model, <span class="string">'_database'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> db:</div><div class="line">            <span class="keyword">return</span> self.DEFAULT_DB</div><div class="line"></div><div class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> settings.DATABASES.keys():</div><div class="line">            <span class="keyword">return</span> db</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            _logger.warn(<span class="string">'%s not exist'</span> % db)</div><div class="line">            <span class="keyword">return</span> self.DEFAULT_DB</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._db(model, **hints)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._db(model, **hints)</div></pre></td></tr></table></figure>
<p><strong>配置DB routers</strong></p>
<p><code>DATABASE_ROUTERS = [&#39;db_router.DatabaseRouter&#39;]</code></p>
<p><strong>为Model制定数据库</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class User(Model)</div><div class="line">	_database = 'user_db'</div><div class="line">    class  Meta:</div><div class="line">    	db_table = 'user'</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p><strong>实现原理</strong></p>
<p>django通过<code>ConnectionRouter</code>管理数据库路由</p>
<p><code>django/db/utils.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionRouter</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @cached_property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">routers</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._routers <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._routers = settings.DATABASE_ROUTERS</div><div class="line">        routers = []</div><div class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> self._routers:</div><div class="line">            <span class="keyword">if</span> isinstance(r, six.string_types):</div><div class="line">                router = import_string(r)()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                router = r</div><div class="line">            routers.append(router)</div><div class="line">        <span class="keyword">return</span> routers</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_router_func</span><span class="params">(action)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_route_db</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">            chosen_db = <span class="keyword">None</span></div><div class="line">            <span class="keyword">for</span> router <span class="keyword">in</span> self.routers:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    method = getattr(router, action)</div><div class="line">                <span class="keyword">except</span> AttributeError:</div><div class="line">                    <span class="comment"># If the router doesn't have a method, skip to the next one.</span></div><div class="line">                    <span class="keyword">pass</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    chosen_db = method(model, **hints)</div><div class="line">                    <span class="keyword">if</span> chosen_db:</div><div class="line">                        <span class="keyword">return</span> chosen_db</div><div class="line">            instance = hints.get(<span class="string">'instance'</span>)</div><div class="line">            <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> instance._state.db:</div><div class="line">                <span class="keyword">return</span> instance._state.db</div><div class="line">            <span class="keyword">return</span> DEFAULT_DB_ALIAS</div><div class="line">        <span class="keyword">return</span> _route_db</div><div class="line"></div><div class="line">    db_for_read = _router_func(<span class="string">'db_for_read'</span>)</div><div class="line">    db_for_write = _router_func(<span class="string">'db_for_write'</span>)</div></pre></td></tr></table></figure>
<p>router初始化</p>
<p><code>router = ConnectionRouter()</code></p>
<p>router引用</p>
<p><code>django/db/models/query.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuerySet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"Return the database that will be used if this query is executed now"</span></div><div class="line">        <span class="keyword">if</span> self._for_write:</div><div class="line">            <span class="keyword">return</span> self._db <span class="keyword">or</span> router.db_for_write(self.model, **self._hints)</div><div class="line">        <span class="keyword">return</span> self._db <span class="keyword">or</span> router.db_for_read(self.model, **self._hints)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django ORM数据模型配置数据库．&lt;/p&gt;
&lt;p&gt;django支持多个数据库，通过django ORM定义数据模型，比如&lt;code&gt;class User(Model)&lt;/code&gt;，无法通过&lt;code&gt;class Meta&lt;/code&gt;配置管理该数据模型对应的数据库，
    
    </summary>
    
    
      <category term="django" scheme="http://blog.hotbaby.org/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>WSGI</title>
    <link href="http://blog.hotbaby.org/2017/05/17/WSGI/"/>
    <id>http://blog.hotbaby.org/2017/05/17/WSGI/</id>
    <published>2017-05-17T02:56:44.000Z</published>
    <updated>2017-05-17T02:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>WSGI(Web Server Gateway Interface) Web服务网关接口。</p>
<p>WSGI的目的替代CGI。CGI进程（类似Python解释器）针对每个请求进行创建，完成请求后退出。如果应程序接收树钱个请求，创建大量的语言解释器进程就会很快导致服务器宕机。</p>
<p><strong>其目标在Web服务器与Web框架层之间提供一个通用的API标准，减少之间互操作性，并形成统一的调用方式。</strong></p>
<h2 id="WSGI-应用"><a href="#WSGI-应用" class="headerlink" title="WSGI 应用"></a>WSGI 应用</h2><p>根据WSGI的定义，其应用是可调用的对象，其参数固定为两个：</p>
<ul>
<li>含有服务器环境变量的字典</li>
<li>可调用的对象， 该对象使用HTTP状态码和会返回客户端的HTTP头来初始化响应</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_wsgi_app</span><span class="params">(environment, start_response)</span>:</span></div><div class="line">    status = <span class="string">'200 OK'</span></div><div class="line">    headers = [<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>]</div><div class="line">    start_response(status, headers)</div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello world!'</span>]</div></pre></td></tr></table></figure>
<p><strong>environment</strong> 包含一些环境变量，如HTTP_HOST, HTTP_USER, HTTP_AGENT, SERVER_PROTOCOL等。‘</p>
<p><strong>start_response()</strong>是一个可调用的对象，必须在应用执行，生成最终发送回客户端的响应</p>
<p>werkzeug中start_response定义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> exc_info:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> headers_sent:</div><div class="line">                reraise(*exc_info)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            exc_info = <span class="keyword">None</span></div><div class="line">    <span class="keyword">elif</span> headers_set:</div><div class="line">        <span class="keyword">raise</span> AssertionError(<span class="string">'Headers already set'</span>)</div><div class="line">    headers_set[:] = [status, response_headers]</div><div class="line">    <span class="keyword">return</span> write</div></pre></td></tr></table></figure>
<h2 id="WSGI服务器"><a href="#WSGI服务器" class="headerlink" title="WSGI服务器"></a>WSGI服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> StringIO</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_wsgi_app</span><span class="params">(app, environment)</span>:</span></div><div class="line">    body = StringIO.StringIO()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, headers)</span>:</span></div><div class="line">        body.write(<span class="string">'Status: %s\r\n'</span> % status)</div><div class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> headers:</div><div class="line">            body.write(<span class="string">'%s: %s\r\n'</span> % header)</div><div class="line">        <span class="keyword">return</span> body.write</div><div class="line"></div><div class="line">    iterable = app(environment, start_response)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        body.write(<span class="string">'\r\n%s\r\n'</span> % <span class="string">'\r\n'</span>.join(line <span class="keyword">for</span> line <span class="keyword">in</span> iterable))</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> hasattr(iterable, <span class="string">'close'</span>) <span class="keyword">and</span> callable(iterable.close):</div><div class="line">            iterable.close()</div></pre></td></tr></table></figure>
<h2 id="Flask-WSGI-应用和服务实现"><a href="#Flask-WSGI-应用和服务实现" class="headerlink" title="Flask WSGI 应用和服务实现"></a>Flask WSGI 应用和服务实现</h2><p><strong>flask WSGI app</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Flask:wsgi_app</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""The actual WSGI application.  This is not implemented in</span></div><div class="line">    `__call__` so that middlewares can be applied without losing a</div><div class="line">    reference to the class.  So instead of doing this::</div><div class="line"></div><div class="line">        app = MyMiddleware(app)</div><div class="line"></div><div class="line">    It's a better idea to do this instead::</div><div class="line"></div><div class="line">        app.wsgi_app = MyMiddleware(app.wsgi_app)</div><div class="line"></div><div class="line">    Then you still have the original application object around and</div><div class="line">    can continue to call methods on it.</div><div class="line"></div><div class="line">    .. versionchanged:: 0.7</div><div class="line">       The behavior of the before and after request callbacks was changed</div><div class="line">       under error conditions and a new callback was added that will</div><div class="line">       always execute at the end of the request, independent on if an</div><div class="line">       error occurred or not.  See :ref:`callbacks-and-errors`.</div><div class="line"></div><div class="line">    :param environ: a WSGI environment</div><div class="line">    :param start_response: a callable accepting a status code,</div><div class="line">                           a list of headers and an optional</div><div class="line">                           exception context to start the response</div><div class="line">    """</div><div class="line">    ctx = self.request_context(environ)</div><div class="line">    ctx.push()</div><div class="line">    error = <span class="keyword">None</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            response = self.full_dispatch_request()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            error = e</div><div class="line">            response = self.handle_exception(e)</div><div class="line">        <span class="keyword">return</span> response(environ, start_response)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> self.should_ignore_error(error):</div><div class="line">            error = <span class="keyword">None</span></div><div class="line">        ctx.auto_pop(error)</div><div class="line"></div><div class="line"><span class="comment"># Flask:__call__</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""Shortcut for :attr:`wsgi_app`."""</span></div><div class="line">    <span class="keyword">return</span> self.wsgi_app(environ, start_response)</div><div class="line"></div><div class="line"><span class="comment"># BaseResponse:__call__</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""Process this response as WSGI application.</span></div><div class="line"></div><div class="line">    :param environ: the WSGI environment.</div><div class="line">    :param start_response: the response callable provided by the WSGI</div><div class="line">                           server.</div><div class="line">    :return: an application iterator</div><div class="line">    """</div><div class="line">    app_iter, status, headers = self.get_wsgi_response(environ)</div><div class="line">    start_response(status, headers)</div><div class="line">    <span class="keyword">return</span> app_iter</div></pre></td></tr></table></figure>
<p><strong>flask WSGI Server</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_wsgi</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.headers.get(<span class="string">'Expect'</span>, <span class="string">''</span>).lower().strip() == <span class="string">'100-continue'</span>:</div><div class="line">        self.wfile.write(<span class="string">b'HTTP/1.1 100 Continue\r\n\r\n'</span>)</div><div class="line"></div><div class="line">    self.environ = environ = self.make_environ()</div><div class="line">    headers_set = []</div><div class="line">    headers_sent = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(data)</span>:</span></div><div class="line">        <span class="keyword">assert</span> headers_set, <span class="string">'write() before start_response'</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</div><div class="line">            status, response_headers = headers_sent[:] = headers_set</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                code, msg = status.split(<span class="keyword">None</span>, <span class="number">1</span>)</div><div class="line">            <span class="keyword">except</span> ValueError:</div><div class="line">                code, msg = status, <span class="string">""</span></div><div class="line">            self.send_response(int(code), msg)</div><div class="line">            header_keys = set()</div><div class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> response_headers:</div><div class="line">                self.send_header(key, value)</div><div class="line">                key = key.lower()</div><div class="line">                header_keys.add(key)</div><div class="line">            <span class="keyword">if</span> <span class="string">'content-length'</span> <span class="keyword">not</span> <span class="keyword">in</span> header_keys:</div><div class="line">                self.close_connection = <span class="keyword">True</span></div><div class="line">                self.send_header(<span class="string">'Connection'</span>, <span class="string">'close'</span>)</div><div class="line">            <span class="keyword">if</span> <span class="string">'server'</span> <span class="keyword">not</span> <span class="keyword">in</span> header_keys:</div><div class="line">                self.send_header(<span class="string">'Server'</span>, self.version_string())</div><div class="line">            <span class="keyword">if</span> <span class="string">'date'</span> <span class="keyword">not</span> <span class="keyword">in</span> header_keys:</div><div class="line">                self.send_header(<span class="string">'Date'</span>, self.date_time_string())</div><div class="line">            self.end_headers()</div><div class="line"></div><div class="line">        <span class="keyword">assert</span> isinstance(data, bytes), <span class="string">'applications must write bytes'</span></div><div class="line">        self.wfile.write(data)</div><div class="line">        self.wfile.flush()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> exc_info:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">if</span> headers_sent:</div><div class="line">                    reraise(*exc_info)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                exc_info = <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> headers_set:</div><div class="line">            <span class="keyword">raise</span> AssertionError(<span class="string">'Headers already set'</span>)</div><div class="line">        headers_set[:] = [status, response_headers]</div><div class="line">        <span class="keyword">return</span> write</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(app)</span>:</span></div><div class="line">        application_iter = app(environ, start_response)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> application_iter:</div><div class="line">                write(data)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</div><div class="line">                write(<span class="string">b''</span>)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="keyword">if</span> hasattr(application_iter, <span class="string">'close'</span>):</div><div class="line">                application_iter.close()</div><div class="line">            application_iter = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        execute(self.server.app)</div><div class="line">    <span class="keyword">except</span> (socket.error, socket.timeout) <span class="keyword">as</span> e:</div><div class="line">        self.connection_dropped(e, environ)</div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="keyword">if</span> self.server.passthrough_errors:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">from</span> werkzeug.debug.tbtools <span class="keyword">import</span> get_current_traceback</div><div class="line">        traceback = get_current_traceback(ignore_system_exceptions=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># if we haven't yet sent the headers but they are set</span></div><div class="line">            <span class="comment"># we roll back to be able to set them again.</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</div><div class="line">                <span class="keyword">del</span> headers_set[:]</div><div class="line">            execute(InternalServerError())</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        self.server.log(<span class="string">'error'</span>, <span class="string">'Error on request:\n%s'</span>,</div><div class="line">                        traceback.plaintext)</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li>《Python核心编程》</li>
<li><a href="https://docs.python.org/2/howto/webservers.html#step-back-wsgi" target="_blank" rel="external">https://docs.python.org/2/howto/webservers.html#step-back-wsgi</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WSGI(Web Server Gateway Interface) Web服务网关接口。&lt;/p&gt;
&lt;p&gt;WSGI的目的替代CGI。CGI进程（类似Python解释器）针对每个请求进行创建，完成请求后退出。如果应程序接收树钱个请求，创建大量的语言解释器进程就会很快导致服务器
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSON Resources</title>
    <link href="http://blog.hotbaby.org/2017/05/16/json-protocols/"/>
    <id>http://blog.hotbaby.org/2017/05/16/json-protocols/</id>
    <published>2017-05-16T01:58:00.000Z</published>
    <updated>2017-07-21T09:36:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JSNO-RPC</strong></p>
<p>A light weight remote procedure call protocol.</p>
<p><strong>SJON API</strong></p>
<p>A specification for building API in JSON.</p>
<p><strong>JSONBIN</strong></p>
<p>JSONbin.io is a simple JSON storage service for free.</p>
<p><strong>jq</strong></p>
<p>jq is a light-weight and flexible command-line JSON processor.</p>
<p><strong>References</strong></p>
<ul>
<li><a href="http://www.jsonrpc.org/" target="_blank" rel="external">JSON-RPC</a></li>
<li><a href="https://stedolan.github.io/jq/" target="_blank" rel="external">jq</a></li>
<li><a href="https://jsonbin.io/" target="_blank" rel="external">jsonbin</a></li>
<li><a href="http://jsonapi.org/" target="_blank" rel="external">jsonapi</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JSNO-RPC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A light weight remote procedure call protocol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SJON API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A specification f
    
    </summary>
    
    
      <category term="json" scheme="http://blog.hotbaby.org/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Flask Signal</title>
    <link href="http://blog.hotbaby.org/2017/05/14/Flask-signal/"/>
    <id>http://blog.hotbaby.org/2017/05/14/Flask-signal/</id>
    <published>2017-05-14T08:50:08.000Z</published>
    <updated>2017-07-21T09:23:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Flask signals 默认没有自己实现signal，而是使用blink进行信号的定义，连接，分发。</p>
<h2 id="Flask-singal"><a href="#Flask-singal" class="headerlink" title="Flask singal"></a>Flask singal</h2><p>flask未实现自己信号处理,而是使用blink.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">signals_available = <span class="keyword">False</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</div><div class="line">    signals_available = <span class="keyword">True</span></div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Namespace</span><span class="params">(object)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">signal</span><span class="params">(self, name, doc=None)</span>:</span></div><div class="line">            <span class="keyword">return</span> _FakeSignal(name, doc)</div></pre></td></tr></table></figure>
<p>flask 支持的信号 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">_signals = Namespace()</div><div class="line"></div><div class="line"><span class="comment"># Core signals.  For usage examples grep the source code or consult</span></div><div class="line"><span class="comment"># the API documentation in docs/api.rst as well as docs/signals.rst</span></div><div class="line">template_rendered = _signals.signal(<span class="string">'template-rendered'</span>)</div><div class="line">before_render_template = _signals.signal(<span class="string">'before-render-template'</span>)</div><div class="line">request_started = _signals.signal(<span class="string">'request-started'</span>)</div><div class="line">request_finished = _signals.signal(<span class="string">'request-finished'</span>)</div><div class="line">request_tearing_down = _signals.signal(<span class="string">'request-tearing-down'</span>)</div><div class="line">got_request_exception = _signals.signal(<span class="string">'got-request-exception'</span>)</div><div class="line">appcontext_tearing_down = _signals.signal(<span class="string">'appcontext-tearing-down'</span>)</div><div class="line">appcontext_pushed = _signals.signal(<span class="string">'appcontext-pushed'</span>)</div><div class="line">appcontext_popped = _signals.signal(<span class="string">'appcontext-popped'</span>)</div><div class="line">message_flashed = _signals.signal(<span class="string">'message-flashed'</span>)</div></pre></td></tr></table></figure>
<h2 id="Blinker-signal"><a href="#Blinker-signal" class="headerlink" title="Blinker signal"></a>Blinker signal</h2><p>blinker支持的特性:</p>
<ul>
<li>a global registry of named signals</li>
<li>anonymous signals</li>
<li>custom name registries</li>
<li>permanently or temporarily connected receivers</li>
<li>automically disconnected receivers via weak referencing</li>
<li>sending arbirary data payloads</li>
<li>collecting return values from signal receivers</li>
<li>thread safety</li>
</ul>
<h3 id="Blinker-signal-sample"><a href="#Blinker-signal-sample" class="headerlink" title="Blinker signal sample"></a>Blinker signal sample</h3><p>TODO</p>
<h3 id="Blinker-signal-realization"><a href="#Blinker-signal-realization" class="headerlink" title="Blinker signal realization"></a>Blinker signal realization</h3><p>TODO </p>
<p>注册</p>
<p>弱引用</p>
<p>线程安全</p>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>connecter weak reference</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_signal_handlers</span><span class="params">(app)</span>:</span></div><div class="line">   <span class="keyword">import</span> logging</div><div class="line">   <span class="keyword">from</span> flask.signals <span class="keyword">import</span> request_finished</div><div class="line">   _logger = logging.getLogger(<span class="string">'api.debug'</span>)</div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">log_response</span><span class="params">(sender, response, **options)</span>:</span></div><div class="line">       print(response)</div><div class="line">   request_finished.connect(log_response, app)</div></pre></td></tr></table></figure>
<p>以上代码，不能按原意正确的运行。因为log_response是局部作用域函数，在函数调用完成后，该作用域会消失，因此不能正确的调用<code>log_response</code>函数。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://pythonhosted.org/blinker/" target="_blank" rel="external">https://pythonhosted.org/blinker/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask signals 默认没有自己实现signal，而是使用blink进行信号的定义，连接，分发。&lt;/p&gt;
&lt;h2 id=&quot;Flask-singal&quot;&gt;&lt;a href=&quot;#Flask-singal&quot; class=&quot;headerlink&quot; title=&quot;Flask si
    
    </summary>
    
    
  </entry>
  
</feed>
