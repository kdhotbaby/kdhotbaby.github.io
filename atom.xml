<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hotbaby</title>
  <subtitle>hotbaby&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hotbaby.org/"/>
  <updated>2017-07-16T08:44:34.000Z</updated>
  <id>http://blog.hotbaby.org/</id>
  
  <author>
    <name>hotbaby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python metaclass</title>
    <link href="http://blog.hotbaby.org/2017/07/16/Python-metaclass/"/>
    <id>http://blog.hotbaby.org/2017/07/16/Python-metaclass/</id>
    <published>2017-07-16T08:44:34.000Z</published>
    <updated>2017-07-16T08:44:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>[Metaclasses] are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don’t (the people who actually need them know with certainty that they need them, and don’t need an explanation about why).</strong></p>
<p>In other words, metaclasses are ultimately just another way to define automatically run code. With the tools listed in the prior section, Python provides ways for us to interject logic in a variety of contexts—at operator evaluation, attribute access, function calls, class instance creation, and now class object creation. It’s a language with hooks galore —a feature open to abuse like any other, but one that also offers the flexibility that some programmers desire, and that some programs may require.</p>
<p>instances are created from classes, and classes are created from type</p>
<p>• Types are defined by classes that derive from type.<br>• User-defined classes are instances of type classes.<br>• User-defined classes are types that generate instances of their own.</p>
<h2 id="Metaclasses-Are-Subclasses-of-Type"><a href="#Metaclasses-Are-Subclasses-of-Type" class="headerlink" title="Metaclasses Are Subclasses of Type"></a>Metaclasses Are Subclasses of Type</h2><p>• type is a class that generates user-defined classes.<br>• Metaclasses are subclasses of the type class.<br>• Class objects are instances of the type class, or a subclass thereof.<br>• Instance objects are generated from a class.</p>
<h2 id="Class-Statement-Protocol"><a href="#Class-Statement-Protocol" class="headerlink" title="Class Statement Protocol"></a>Class Statement Protocol</h2><p>We’ve already learned that when Python reaches a class statement, it runs its nested block of code to create its attributes—all the names assigned at the top level of the nested code block generate attributes in the resulting class object. These names are usually method functions created by nested defs, but they can also be arbitrary attributes assigned to create class data shared by all instances.<br>Technically speaking, Python follows a standard protocol to make this happen: at the end of a class statement, and after running all its nested code in a namespace dictionary corresponding to the class’s local scope, Python calls the type object to create the class object like this:<br><code>class = type(classname, superclasses, attributedict)</code></p>
<p>The type object in turn defines a <strong>call</strong> operator overloading method that runs two other methods when the type object is called:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">type.__new__(typeclass, classname, superclasses, attributedict)</div><div class="line">type.__init__(class, classname, superclasses, attributedict)</div></pre></td></tr></table></figure>
<h2 id="Inheritance-and-Instance"><a href="#Inheritance-and-Instance" class="headerlink" title="Inheritance and Instance"></a>Inheritance and Instance</h2><ul>
<li>Metaclass inherit from the type class(usually)</li>
<li>Metaclass declarations are inherited by subclasses</li>
<li>Metaclass attributes are not inherited by class instances</li>
<li>Metaclass attributes are acquired by classes</li>
</ul>
<p><em>Metaclass inherit from the type class(usually)</em></p>
<p>Metaclass typically redefined the type class’s <code>__new__</code> and <code>__init__</code> to customize class creation and initialization.</p>
<p><em>Metaclass declarations are inherited by subclass</em></p>
<p>The <code>metaclass=M</code> declaration in a user-defined class is inherited by the class’s normal subclass, so the metaclass will run for the construction of each class that inherits this specification in a superclass inheritance chain.</p>
<p><em>Metaclass attributes are not inherited by class instances</em></p>
<p>classes are instances of metaclass, the behavior defined in a metaclass applies to the class, but not the class’s later instance.</p>
<p><em>Metaclass attributes are acquired by classes</em></p>
<h2 id="Inheritance-The-Full-Story"><a href="#Inheritance-The-Full-Story" class="headerlink" title="Inheritance: The Full Story"></a>Inheritance: The Full Story</h2><p>instance inheritances works in similar ways, whether the “instance” is created from a normal class, or is class created from a metalcass subclass of type.</p>
<p><strong>Python’s inheritance algorithm: The simple version</strong></p>
<p>Technically, inheritane deploys two distinct but similar lookup routines, and is based on MROs. Because <code>__bases__</code> are used to construct the <code>__mro__</code> ordering at class creation time, and because class’s <code>__mro__</code> inlcudes itself, the prior section’s generalization is the same as the following</p>
<ol>
<li><p>From an instance I, search the instance, the its class, and then all its superclasses<br>a. The <code>__dict__</code> of. the instance I.<br>b. The <code>__dict__</code> of all classes on the <code>__mro__</code> found at I’s <code>__class__</code>, from left to right</p>
</li>
<li><p>From a class C, search the class, then all its superclasses, and then its metaclass tree using:<br>a. The <code>__dict__</code> of all the classes on the <code>__mro__</code> found at C itslef, from left to right<br>b. The <code>__dict__</code> of all metaclasses on the <code>__mro__</code> found at C’s <code>__class__</code>, from left to right</p>
</li>
<li><p>In both rule 1 and 2, give precedence to data descriptor located in step b sources</p>
</li>
<li><p>In both rule 1 and 2, skip a and begin the search at step b for built-in operations</p>
</li>
</ol>
<p><strong>The descriptors special case</strong></p>
<p>In short, some descriptors known as data descriptors –those that defined <code>__set__</code> methods to intercept assignments– are given precedence, such that their names override other their inheritance sources.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, ins, _type)</span>:</span></div><div class="line"><span class="meta">... </span>            print(<span class="string">'call D.__get__'</span>)</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, ins, value)</span>:</span></div><div class="line"><span class="meta">... </span>            print(<span class="string">'call D.__set__'</span>)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    d = D()</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins = Dummy()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d</div><div class="line">call D.__get__</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d = <span class="string">'spam'</span></div><div class="line">call D.__set__</div></pre></td></tr></table></figure>
<p>If this descriptor did not define a <code>__set__</code>, the name in the instance’s dictionary would hide the name in its class instead, per normal inheritance:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, ins, value)</span>:</span></div><div class="line"><span class="meta">... </span>            print(<span class="string">'call D.__get__'</span>)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    d = D()</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins = Dummy()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d</div><div class="line">call D.__get__</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d = <span class="string">'spam'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ins.d</div><div class="line"><span class="string">'spam</span></div></pre></td></tr></table></figure>
<p><strong>Python’s inheritance algorithm: The somewhat-more-complete version</strong></p>
<p>Python’s full new-style inheritance algorithm can be stated as follows - a complex procedure, which assumes knowledge of descriptors, metaclass, and MROs, but is the final arbiter of attribute names nonetheless.</p>
<p><em>To look up an explicit attribute name:</em></p>
<ol>
<li><p>From an instance I, search the instance, its class, and its superclasses, as follows:</p>
<p> a.  Search the <code>__dict__</code> of all classes on the <code>__mro__</code> at I’s <code>__class__</code><br> b.  If a data descriptor was foudn in step a, call it and exit<br> c. Else, return a value in the <code>__dict__</code> of instance I<br> c. Else, call a non data descriptor or return a value found in step a</p>
</li>
<li><p>From a class C, search the class, its superclasses, and its metaclasses tree, as follows:<br>a. Search the <code>__dict__</code> of all metaclass on the <code>__mro__</code> found at C’s <code>__class__</code><br>b. If a data descriptor was found in step <em>a</em>, call it and exit<br>   c. Else, call a descriptor or return a value in the <code>__dict__</code> of a class on C’s own <code>__mro__</code><br>d. Else, call a non-data descriptor or return a value found in step a</p>
</li>
<li><p>In both rule 1 and 2, built-in operations use just step a sources</p>
</li>
</ol>
<p>This applies to normal, explict attribute fetch only. The implicit lookup of metod names for built-ins doesn’t follow these rules.</p>
<p><strong>Assignment inheritance</strong></p>
<p>When an attribute assignment is run for new-style classes, a data descriptor with <code>__set__</code> method is acquired from a class by inheritance using the MRO, and has precendence over the normal storage model. </p>
<p><strong>The built-ins special case</strong></p>
<p>TODO</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>In this chapter, we studied metaclasses and explored examples of them in action. Metaclass allow us to tap into the class creation protocol of Python, in order to manage or augment user-defined classes. They may provide better solutions for API writers than manual code or helper functions.</p>
<ol>
<li><p><strong>What is a metaclass?</strong><br>A metaclass is a class used to create a class. Normal new-style classes are instances of the <strong>type</strong> class by default. Metaclass are usually subclass of the <strong>type</strong> class, which redifines class creation protocol methods in order to customize the class creation call issued at the end of a class statement; they typicall refined the methods <code>__new__</code> and <code>__init__</code> to tap into the class creation protocol. </p>
</li>
<li><p><strong>How do you declare the metaclass of a class?</strong><br>Python 2.x <code>__metaclass__ = M</code> Python 3.x <code>class C(metaclass=M)</code></p>
</li>
<li><p><strong>How do class decorators overlap with metaclasses for managing classes?</strong><br>Because both are automaticall triggered at the end of class statement, class decorators and metaclasses can both used to manage classes. Decorators rebind a class name to callable’s result and metaclass route class creation through a callaable, but hooks can be used for similar purpose. To manage classes, decorators simply augment and return the orign class object. Metaclass argument a class after they create it. Decorators may have a slight disadvantage in this role if a new class must be defined, because the original class has already been created.</p>
</li>
<li><p><strong>How doclass decorators overlap with metalcasses for managing instances?</strong><br>Becuase both automatically triggered at the end the class statement, we can use both class decorators and metaclass to manage class instance, by inserting a wrapper object to cath instance creation calls. Decorators my rebind the class name to callable run on instance creation that retains the original class object. Metaclass can do the same, but may hava a slight disadvantage in this role, because they must also create the class object.</p>
</li>
</ol>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><em>Learning Python</em></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;[Metaclasses] are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don’t (the peo
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python  descriptor</title>
    <link href="http://blog.hotbaby.org/2017/07/10/Python-descriptor/"/>
    <id>http://blog.hotbaby.org/2017/07/10/Python-descriptor/</id>
    <published>2017-07-10T15:58:38.000Z</published>
    <updated>2017-07-10T16:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个对象定义了以下任意方法，这个对象就是一个描述符。给描述符下个定义，描述符就是绑定了行为属性的对象。</p>
<p><code>object.__get__(self, instance, owner)</code></p>
<p><code>object.__set__(self, instance, value)</code></p>
<p><code>object.__delete__(self, instance)</code></p>
<p>属性访问的默认行为就是从一个对象字典中获取、设置和删除属性。比如，<code>a.x</code>首先会搜索<code>a.__dict__[&#39;x&#39;]</code>，其次<code>type(a).__dict__[&#39;x&#39;]</code>，最后所有<code>type(a)</code>的元类。<strong>如果要查找的值一个包含描述器方法的对象，Python会用调用描述器方法代替默认行为。</strong></p>
<blockquote>
<p>Note:只有new-style class会调用描述符的对象的方法。</p>
</blockquote>
<p>描述符是一个强大的通用协议。Python内建的property, staticmethod, classmethod, super背后的实现机制都是描述符协议。</p>
<h2 id="Descriptor-Protocol"><a href="#Descriptor-Protocol" class="headerlink" title="Descriptor Protocol"></a>Descriptor Protocol</h2><p><code>object.__get__(self, ins, _type=None)</code></p>
<p><code>object.__set__(self, ins, value)</code></p>
<p><code>object.__del__(self, ins)</code></p>
<p>如果一个对象包含上面任意一个方法，就可以被看作是一个描述符。如果一个对象定义了<code>__get__</code>和<code>__set__</code>两个方法，该对象可以被看作一个数据描述符，如果一个对象只定义了<code>__get__</code>，该对象就是non-data描述符。</p>
<p><strong>数据描述符与非数据描述符的区别在于，描述符与对象实例entry调用优先级。如果一个实例的字典有一个entry和数据描述符的名字相同，数据描述符的调用的优先级高。如果一个实例有一个entry和非数据描述符的名字相同个，实例entry的调用的优先级高。</strong></p>
<h2 id="Invoking-Descriptors"><a href="#Invoking-Descriptors" class="headerlink" title="Invoking Descriptors"></a>Invoking Descriptors</h2><p><code>obj.d</code>查找obj的字典是否包含d，如果d定义了<code>__get__</code>方法，<code>d.__get__(obj, type(obj))</code>就会被调用。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, key)</span>:</span></div><div class="line">    <span class="string">"Emulate type_getattro() in Objects/typeobject.c"</span></div><div class="line">    v = object.__getattribute__(self, key)</div><div class="line">    <span class="keyword">if</span> hasattr(v, <span class="string">'__get__'</span>):</div><div class="line">        <span class="keyword">return</span> v.__get__(<span class="keyword">None</span>, self)</div><div class="line">    <span class="keyword">return</span> v</div></pre></td></tr></table></figure>
<p>super()返回的对象有一个定制化的<code>__getattribute__</code>方法，用于调用描述符。<code>super(B, self).m</code>先会搜索<code>obj.__class__.__mro__</code>查找基类A，如果是一个数据描述符，则会调用<code>A.__dict__[&#39;m&#39;].__get__(obj, B)</code>，如果是一个非数据描述符，返回结果不会改变。</p>
<h2 id="Built-in-Descriptors"><a href="#Built-in-Descriptors" class="headerlink" title="Built-in Descriptors"></a>Built-in Descriptors</h2><h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span> <span class="keyword">return</span> self.__x</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span><span class="params">(self, value)</span>:</span> self.__x = value</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span><span class="params">(self)</span>:</span> <span class="keyword">del</span> self.__x</div><div class="line">    x = property(getx, setx, delx, <span class="string">"I'm the 'x' property."</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Property</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"Emulate PyProperty_Type() in Objects/descrobject.c"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fget=None, fset=None, fdel=None, doc=None)</span>:</span></div><div class="line">        self.fget = fget</div><div class="line">        self.fset = fset</div><div class="line">        self.fdel = fdel</div><div class="line">        <span class="keyword">if</span> doc <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> fget <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            doc = fget.__doc__</div><div class="line">        self.__doc__ = doc</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        <span class="keyword">if</span> self.fget <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"unreadable attribute"</span>)</div><div class="line">        <span class="keyword">return</span> self.fget(obj)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.fset <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"can't set attribute"</span>)</div><div class="line">        self.fset(obj, value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.fdel <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"can't delete attribute"</span>)</div><div class="line">        self.fdel(obj)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getter</span><span class="params">(self, fget)</span>:</span></div><div class="line">        <span class="keyword">return</span> type(self)(fget, self.fset, self.fdel, self.__doc__)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setter</span><span class="params">(self, fset)</span>:</span></div><div class="line">        <span class="keyword">return</span> type(self)(self.fget, fset, self.fdel, self.__doc__)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleter</span><span class="params">(self, fdel)</span>:</span></div><div class="line">        <span class="keyword">return</span> type(self)(self.fget, self.fset, fdel, self.__doc__)</div></pre></td></tr></table></figure>
<h3 id="Staticmethod"><a href="#Staticmethod" class="headerlink" title="Staticmethod"></a>Staticmethod</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethod</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"Emulate PyStaticMethod_Type() in Objects/funcobject.c"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f)</span>:</span></div><div class="line">        self.f = f</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.f</div></pre></td></tr></table></figure>
<h3 id="Classmethod"><a href="#Classmethod" class="headerlink" title="Classmethod"></a>Classmethod</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassMethod</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"Emulate PyClassMethod_Type() in Objects/funcobject.c"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f)</span>:</span></div><div class="line">        self.f = f</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, klass=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> klass <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            klass = type(obj)</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span><span class="params">(*args)</span>:</span></div><div class="line">            <span class="keyword">return</span> self.f(klass, *args)</div><div class="line">        <span class="keyword">return</span> newfunc</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/2/reference/datamodel.html#descriptors" target="_blank" rel="external">https://docs.python.org/2/reference/datamodel.html#descriptors</a></li>
<li><a href="https://docs.python.org/2/howto/descriptor.html" target="_blank" rel="external">https://docs.python.org/2/howto/descriptor.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果一个对象定义了以下任意方法，这个对象就是一个描述符。给描述符下个定义，描述符就是绑定了行为属性的对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;object.__get__(self, instance, owner)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;object.__set
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Selenium</title>
    <link href="http://blog.hotbaby.org/2017/07/09/Selenium/"/>
    <id>http://blog.hotbaby.org/2017/07/09/Selenium/</id>
    <published>2017-07-09T14:06:43.000Z</published>
    <updated>2017-07-09T14:06:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>selenium模拟浏览器行为</p>
<p><strong>安装依赖</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install chromium</div><div class="line">$ sudo apt-get install chromedriver</div><div class="line">$ sudo apt-get install python-selenium</div><div class="line">$ sudo pip install selenium</div></pre></td></tr></table></figure>
<p><strong>代码实例</strong></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> click</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</div><div class="line"><span class="keyword">from</span> selenium.webdriver.remote.command <span class="keyword">import</span> Command</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--url', prompt='download URL', default='http://baidu.com', help='The download URL')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        driver = webdriver.Chrome(<span class="string">'./webdrivers/chromedriver'</span>)</div><div class="line"><span class="comment">#         driver = webdriver.PhantomJS('./webdrivers/phantomjs')</span></div><div class="line"></div><div class="line">        driver.get(url)</div><div class="line">        print(driver.title)</div><div class="line"></div><div class="line">        actions = ActionChains(driver)</div><div class="line">        <span class="comment">#resource = driver.page_source.encode('utf-8')</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#filename = '%s.html' % driver.title</span></div><div class="line">        <span class="comment">#with open(filename, 'w+') as f:</span></div><div class="line">        <span class="comment">#    f.write(resource)</span></div><div class="line"></div><div class="line">        <span class="comment"># screenshot</span></div><div class="line"><span class="comment">#         driver.get_screenshot_as_file('%s.png'%driver.title)</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment"># click</span></div><div class="line"><span class="comment">#         news_ele = driver.find_element_by_link_text(u'新闻')</span></div><div class="line"><span class="comment">#         actions.reset_actions()</span></div><div class="line"><span class="comment">#         actions.click(news_ele).perform()</span></div><div class="line"></div><div class="line">        <span class="comment"># save as</span></div><div class="line">        ActionChains(driver).context_click().perform()</div><div class="line">        ActionChains(driver).key_down(Keys.CONTROL).send_keys(<span class="string">'s'</span>).key_up(Keys.CONTROL).perform()</div><div class="line">        sleep(<span class="number">6</span>)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        driver.quit()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    download()</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="external">https://pypi.python.org/pypi/selenium</a></li>
<li><a href="http://phantomjs.org/download.html" target="_blank" rel="external">http://phantomjs.org/download.html</a></li>
<li><a href="https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver" target="_blank" rel="external">https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver</a></li>
<li><a href="http://selenium-python.readthedocs.io/" target="_blank" rel="external">http://selenium-python.readthedocs.io/</a></li>
<li><a href="https://w3c.github.io/webdriver/webdriver-spec.html" target="_blank" rel="external">https://w3c.github.io/webdriver/webdriver-spec.html</a></li>
<li><a href="http://phantomjs.org/page-automation.html" target="_blank" rel="external">http://phantomjs.org/page-automation.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;selenium模拟浏览器行为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
    
      <category term="selenium" scheme="http://blog.hotbaby.org/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python context</title>
    <link href="http://blog.hotbaby.org/2017/07/09/Python-context/"/>
    <id>http://blog.hotbaby.org/2017/07/09/Python-context/</id>
    <published>2017-07-09T13:52:12.000Z</published>
    <updated>2017-07-10T01:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>上下管理器是一个对象，定义了执行<code>with</code>语句时需要创建的上下文。context manager的<code>__enter__()</code>和<code>__exit__()</code>方法分别在进入、退出<code>with</code>语句时被调用。</p>
<p><code>object.__enter__(self)</code></p>
<p><code>object.__exit__(self, exc_type, exc_value, traceback)</code></p>
<h2 id="with-statement"><a href="#with-statement" class="headerlink" title="with statement"></a>with statement</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">with_stmt ::=  <span class="string">"with"</span> with_item (<span class="string">","</span> with_item)* <span class="string">":"</span> suite</div><div class="line">with_item ::=  expression [<span class="string">"as"</span> target]</div></pre></td></tr></table></figure>
<p><strong>with</strong>语句执行数据流：</p>
<ol>
<li>评估上下文表达式是否包含上下文管理器</li>
<li>加载上下文管理器的<code>__exit__</code>方法</li>
<li>调用上下文管理的<code>__enter__</code>方法</li>
<li>如果target包含在with语句中，将<code>__enter__</code>方法的返回值赋给target</li>
<li>执行suite</li>
<li>调用<code>__exit__()</code>方法</li>
</ol>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mgr = (EXPR)</div><div class="line">exit = type(mgr).__exit__  <span class="comment"># Not calling it yet</span></div><div class="line">value = type(mgr).__enter__(mgr)</div><div class="line">exc = <span class="keyword">True</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    VAR = value  <span class="comment"># Only if "as VAR" is present</span></div><div class="line">    BLOCK</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="comment"># The exceptional case is handled here</span></div><div class="line">    exc = <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exit(mgr, *sys.exc_info()):</div><div class="line">    		<span class="keyword">raise</span></div><div class="line">    <span class="comment"># The exception is swallowed if exit() returns true</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    <span class="comment"># The normal and non-local-goto cases are handled here</span></div><div class="line">    <span class="keyword">if</span> exc:</div><div class="line">        exit(mgr, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<h2 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h2><p>contextlib提供了快速定义支持上下文管理器的函数对象。</p>
<p>定义一个生成器函数，contextmanager装饰后就变成一个支持上下文管理器的函数对象。yield之前语句子在代码块之前被执行，yield之后语句在代码执行完之后被执行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from contextlib import contextmanager</div><div class="line">&gt;&gt;&gt; </div><div class="line">&gt;&gt;&gt; @contextmanager</div><div class="line">... def tag(name):</div><div class="line">...     print('&lt;%s&gt;' % name)</div><div class="line">...     yield</div><div class="line">...     print('&lt;/%s&gt;' % name)</div><div class="line">... </div><div class="line">&gt;&gt;&gt; with tag('h1'):</div><div class="line">...     print('hotbaby')</div><div class="line">... </div><div class="line">&lt;h1&gt;</div><div class="line">hotbaby</div><div class="line">&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h2 id="context-decorator"><a href="#context-decorator" class="headerlink" title="context decorator"></a>context decorator</h2><p>contextmanager是一个函数装饰器，装饰只包含一个yield语句的生成器函数，返回一个支持上下文管理器的函数对象。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">contextmanager</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(*args, **kwds)</span>:</span></div><div class="line">        <span class="keyword">return</span> GeneratorContextManager(func(*args, **kwds))</div><div class="line">    <span class="keyword">return</span> helper</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: 被装饰的生成器函数变成生成器作为参数传递到<strong>GeneratorContextManager</strong>对象中。</p>
</blockquote>
<p>生成器上下文管理器</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorContextManager</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Helper for @contextmanager decorator."""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, gen)</span>:</span></div><div class="line">        self.gen = gen</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self.gen.next()</div><div class="line">        <span class="keyword">except</span> StopIteration:</div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't yield"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">        <span class="keyword">if</span> type <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.gen.next()</div><div class="line">            <span class="keyword">except</span> StopIteration:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't stop"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="comment"># Need to force instantiation so we can reliably</span></div><div class="line">                <span class="comment"># tell if we get the same exception back</span></div><div class="line">                value = type()</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.gen.throw(type, value, traceback)</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't stop after throw()"</span>)</div><div class="line">            <span class="keyword">except</span> StopIteration, exc:</div><div class="line">                <span class="comment"># Suppress the exception *unless* it's the same exception that</span></div><div class="line">                <span class="comment"># was passed to throw().  This prevents a StopIteration</span></div><div class="line">                <span class="comment"># raised inside the "with" statement from being suppressed</span></div><div class="line">                <span class="keyword">return</span> exc <span class="keyword">is</span> <span class="keyword">not</span> value</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="comment"># only re-raise if it's *not* the exception that was</span></div><div class="line">                <span class="comment"># passed to throw(), because __exit__() must not raise</span></div><div class="line">                <span class="comment"># an exception unless __exit__() itself failed.  But throw()</span></div><div class="line">                <span class="comment"># has to raise the exception to signal propagation, so this</span></div><div class="line">                <span class="comment"># fixes the impedance mismatch between the throw() protocol</span></div><div class="line">                <span class="comment"># and the __exit__() protocol.</span></div><div class="line">                <span class="comment">#</span></div><div class="line">                <span class="keyword">if</span> sys.exc_info()[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> value:</div><div class="line">                    <span class="keyword">raise</span></div></pre></td></tr></table></figure>
<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ul>
<li><a href="http://hotbaby.org/python/2/reference/datamodel.html#with-statement-context-managers" target="_blank" rel="external">http://hotbaby.org/python/2/reference/datamodel.html#with-statement-context-managers</a></li>
<li><a href="http://hotbaby.org/python/2/reference/compound_stmts.html#the-with-statement" target="_blank" rel="external">http://hotbaby.org/python/2/reference/compound_stmts.html#the-with-statement</a></li>
<li><a href="http://hotbaby.org/python/2/library/contextlib.html" target="_blank" rel="external">http://hotbaby.org/python/2/library/contextlib.html</a></li>
<li><a href="https://hg.python.org/cpython/file/2.7/Lib/contextlib.py" target="_blank" rel="external">https://hg.python.org/cpython/file/2.7/Lib/contextlib.py</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0343/" target="_blank" rel="external">https://www.python.org/dev/peps/pep-0343/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上下管理器是一个对象，定义了执行&lt;code&gt;with&lt;/code&gt;语句时需要创建的上下文。context manager的&lt;code&gt;__enter__()&lt;/code&gt;和&lt;code&gt;__exit__()&lt;/code&gt;方法分别在进入、退出&lt;code&gt;with&lt;/code&gt;语
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python debug</title>
    <link href="http://blog.hotbaby.org/2017/06/09/Python-debug/"/>
    <id>http://blog.hotbaby.org/2017/06/09/Python-debug/</id>
    <published>2017-06-09T10:09:52.000Z</published>
    <updated>2017-06-09T10:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Debug Python程序。</p>
<h2 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h2><h2 id="pyringe"><a href="#pyringe" class="headerlink" title="pyringe"></a>pyringe</h2><p>pdb不支持attch正在运行的Python程序，pyringe很好的解决此问题。此外，pyringe支持代码自省，查看局部变量、全局变量，代码注入，查看线程列表，打印栈帧。</p>
<p>准备环境：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ apt-get  install -y python-dbg gdb</div><div class="line">$ pip install pyringe</div></pre></td></tr></table></figure></p>
<p>调试：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -m pyringe</div><div class="line">$ attach(pid)</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/google/pyringe" target="_blank" rel="external">https://github.com/google/pyringe</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Debug Python程序。&lt;/p&gt;
&lt;h2 id=&quot;pdb&quot;&gt;&lt;a href=&quot;#pdb&quot; class=&quot;headerlink&quot; title=&quot;pdb&quot;&gt;&lt;/a&gt;pdb&lt;/h2&gt;&lt;h2 id=&quot;pyringe&quot;&gt;&lt;a href=&quot;#pyringe&quot; class=&quot;hea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>debian timezone</title>
    <link href="http://blog.hotbaby.org/2017/06/09/debian-timezone/"/>
    <id>http://blog.hotbaby.org/2017/06/09/debian-timezone/</id>
    <published>2017-06-09T09:20:49.000Z</published>
    <updated>2017-06-09T09:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>dpkg-reconfigure  tzdata</code></p>
<p><strong>Referece</strong></p>
<ul>
<li><a href="https://wiki.debian.org/TimeZoneChanges" target="_blank" rel="external">https://wiki.debian.org/TimeZoneChanges</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;dpkg-reconfigure  tzdata&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referece&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/TimeZoneChanges&quot; tar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python customization</title>
    <link href="http://blog.hotbaby.org/2017/06/09/Python-customization/"/>
    <id>http://blog.hotbaby.org/2017/06/09/Python-customization/</id>
    <published>2017-06-09T04:20:00.000Z</published>
    <updated>2017-06-12T00:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>object.__new__(cls[, ...])</code></strong></p>
<p><code>object.__new__(cls, *args, **kwargs)</code> Called to create a new instance of class <code>cls.__new__()</code>is <strong>a static method</strong> that take the class as its first argument.The remaining arguments are those passed to the object constructor expression(the call to the class). <strong>The return value of <code>__new__()</code>should be the new object instance(usually an instance of cls).</strong></p>
<p>Typical implementations create a new instance of the class by invoking the superclass’s <code>__new__()</code>method using <code>super(currentclas, cls).__new__(cls[, ...])</code>with appropriate arguments and then modifying the newly-created instance as necessary before returning it.</p>
<p>if <code>__new__()</code> return an instance of cls, then the new instance’s <code>__init__()</code> will be invoked.</p>
<p>if <code>__new__()</code>does not return an instance of cls, then the new instance’s <code>__init__()</code> method will not be invoked.</p>
<p><code>__new__()</code>is intended mainly to allow subclasses of immutable type(like int, str or tuple) to customize instance creation. It is also commonly overridden in custom metaclass in order to customize class creation.</p>
<p><strong>object.<strong>init</strong>(self[,…])</strong></p>
<p><code>object.__init__(self, *args, **kwargs)</code> <strong>Called after the instance has been created</strong> (by <code>__new__()</code>), but before it is returned to the caller. The arguments are those passed to the class constructor expression. If a base class has an <code>__init__()</code>method, the derived class’s <code>__init__()</code>method must explicitly call it to ensure proper initialization of the base class of the instance.</p>
<p><code>__new__()</code>and<code>__init__()</code>work together in constructing objects(<code>__new__()</code>to create it, and <code>__init__()</code>to customize it). <strong>no non-None value may be returned by <code>__init__()</code>; doing so will cause a TypeError to be raised at runtime.</strong></p>
<p><strong>object.<strong>del</strong>(self)</strong></p>
<p>Called when the instance is about to be destroyed. This is also a destructor. If a base class has a <code>__del__()</code> method, the derived class’s <code>__del__()</code>method, must explicitly call it to ensure proper deletion of the base class part of the instance.</p>
<p>总结：</p>
<ul>
<li>作用 <code>object.__new__(cls, *args, **kwargs)</code>用于创建对象实例，<code>object.__init__(self,*args, **kwargs)</code>用于初始化实例</li>
<li>返回值 <code>__new__(cls)</code>返回对象实例，只有当<code>__new__(cls)</code>返回一个对象实例时，<code>__init__(self)</code>才会被调用。<code>__init__(self)</code>返回None，返回值非None，会抛出异常</li>
<li>参数 <code>__new__(cls)</code>是一个静态方法，第一个参数是cls. <code>__init__(self)</code>是一个类方法，第一个参数是对象self</li>
<li>时序 <code>__new__(cls)</code>先与<code>__init(self)__</code>被调用</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/2/reference/datamodel.html#basic-customization" target="_blank" rel="external">https://docs.python.org/2/reference/datamodel.html#basic-customization</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;object.__new__(cls[, ...])&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;object.__new__(cls, *args, **kwargs)&lt;/code&gt; Called to create a new 
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python pip mirror</title>
    <link href="http://blog.hotbaby.org/2017/06/08/Python-pip-mirror/"/>
    <id>http://blog.hotbaby.org/2017/06/08/Python-pip-mirror/</id>
    <published>2017-06-08T06:22:00.000Z</published>
    <updated>2017-06-08T06:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>PyPI(Python Package Index)是Python软件仓库。</p>
<p>pip是Python包管理工具，默认使用<code>pypi.python.org</code>作为PyPI的镜像。</p>
<p>pip安装Python软件包经常会出现”链接pypi.python.org失败”。为了优化包的管理，考虑替换<code>pypi.python.org</code>,转而使用国内的PyPI镜像。</p>
<p><strong>PyPI mirror list</strong></p>
<table>
<thead>
<tr>
<th>Mirror</th>
<th>Location</th>
</tr>
</thead>
<tbody>
<tr>
<td>pypi.python.org</td>
<td>San Francisco, California US</td>
</tr>
<tr>
<td>pypi.douban.com</td>
<td>Beijing, Beijing CN</td>
</tr>
<tr>
<td>pypi.fcio.net</td>
<td>Oberhausen, Nordrhein-Westfalen DE</td>
</tr>
</tbody>
</table>
<p><strong>Linux(Debian) 替换PyPI镜像</strong></p>
<p><code>touch ~/.pip/pip.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url = https://pypi.douban.com/simple</div><div class="line">format = columns</div></pre></td></tr></table></figure>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://www.pypi-mirrors.org/" target="_blank" rel="external">https://www.pypi-mirrors.org/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21863043" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21863043</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyPI(Python Package Index)是Python软件仓库。&lt;/p&gt;
&lt;p&gt;pip是Python包管理工具，默认使用&lt;code&gt;pypi.python.org&lt;/code&gt;作为PyPI的镜像。&lt;/p&gt;
&lt;p&gt;pip安装Python软件包经常会出现”链接pyp
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
      <category term="PyPI" scheme="http://blog.hotbaby.org/tags/PyPI/"/>
    
  </entry>
  
  <entry>
    <title>Lisp</title>
    <link href="http://blog.hotbaby.org/2017/06/01/Lisp/"/>
    <id>http://blog.hotbaby.org/2017/06/01/Lisp/</id>
    <published>2017-06-01T05:14:00.000Z</published>
    <updated>2017-06-02T04:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>为什么Lisp语言很特别</strong></p>
<p>Lisp语言从诞生的时候就包含9种思想.其中一些我们今天已经习以为常,另一些则刚刚在其他高级语言中出现,至今还有2种是Lisp独有的.按照大众的接受程度,这9种思想依次如下排列:</p>
<ol>
<li>条件结构.现在大家都觉得这是理所当然的,但是Fortran I就没有这个结构,它只有底层机器的goto结构.</li>
<li>函数也是一种数据类型.在Lisp语言中,函数与整数或字符串一样,也属于数据类型的一种.它有自己的字面表示形式(literal representation),能狗存储在变量中,也能当作参数传递.一种数据类型应该有的功能,它都有.</li>
<li>递归.Lisp是第一个支持递归函数的高级语言.</li>
<li>变量的动态类型.在Lisp语言中,所有变量实际上都是指针,所指向的值有类型之分,而变量本身没有.复制变量就是相当于复制指针,而不是复制它们指向的数据.</li>
<li>垃圾回收机制.</li>
<li>程序由表达式组成.Lisp程序是一些表达树的集合,每个表达式都返回一个值.这与Fortran和大多数后来的语言都截然不同,他们的程序都由表达式和语句组成.区分表达式与语句在Fortran I中是自然的,因为它不支持语句嵌套.所以,如果你需要用数学式子计算一个值,那就只有表达式返回这个值,没有其他语法结构可用,否则就无法处理这个值.后来,新的编程语言支持块结构,这种限制当然就不存在了.但是为时已晚,表达式和语句的区分已经根深蒂固.它从Fortran扩散到它们两者的后继语言.</li>
<li>符号类型.符号实际上是一种指针,指向存储在散列表中字符串.所以,比较两个符号是否相等,只要看它们的指针是否一样就可以了,不用逐个字符比较.</li>
<li>代码使用符号和常量组成的树形表示法.</li>
<li>无论什么时候,整个语言都是可用的.Lisp并不真正区分读取,编译期和运行期.你可以在读取期编译或运行代码,也可以在编译期读取和运行代码,还可以在运行期读取或编译代码.在读取期运行代码,使得用户可以重新调整Lisp的语法,在编译期运行代码,则是Lisp宏的工作基础,在运行期编译代码,使得Lisp可以在Emacs这样的程序中充当扩展语言(extension language),在运行期读取代码,使得程序之间可以用S表达式通信,近来XML格式的出现使得这个概念被重新”发明”出来了.</li>
</ol>
<p>Lisp语言刚出现的时候,这些思想与其他编程语言大相径庭,后者的设计思想主要由50年代后期的硬件决定.随着时间流逝,流行的编程语言不断更新换代,语言设计思想逐渐向Lisp靠拢.思想(1)到思想(5)已经被广泛接受,思想(6)开始在主流编程语言中出现,思想(7)在Python语言中有所实现,不过似乎没有专用的语法.</p>
<p>思想(8)可能是最有意思的一点.它与思想(9)只是由于偶然的原因成为Lisp语言的一部分，因为它们不属于麦卡锡的原始构想，是由拉塞尔自行添加的．它们从此使得Lisp语言看上去很古怪，但也成为了这种语言最独一无二的特点．说Lisp语法古怪不是因为它的语法很古怪，而是因为它根本就没有语法，程序直接以解析树(parse tree)的形式表达出来．在其他语言中，这种形式只是经过解析在后台产生，但是Lisp直接采用它作为表达式形式．它由列表构成，而列表则是Lisp的基本数据结构．</p>
<p>用一种语言自己的数据结构来表达该语言是非常强大的功能．思想(8)和思想(9)，意味着你可以写出一种能够自己编程的程序．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;为什么Lisp语言很特别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lisp语言从诞生的时候就包含9种思想.其中一些我们今天已经习以为常,另一些则刚刚在其他高级语言中出现,至今还有2种是Lisp独有的.按照大众的接受程度,这9种思想依次如下排列:&lt;/p&gt;
&lt;ol&gt;
&lt;
    
    </summary>
    
    
      <category term="Lisp" scheme="http://blog.hotbaby.org/tags/Lisp/"/>
    
      <category term="Paul Graham" scheme="http://blog.hotbaby.org/tags/Paul-Graham/"/>
    
  </entry>
  
  <entry>
    <title>Django database router</title>
    <link href="http://blog.hotbaby.org/2017/05/17/django-db-router/"/>
    <id>http://blog.hotbaby.org/2017/05/17/django-db-router/</id>
    <published>2017-05-17T11:56:00.000Z</published>
    <updated>2017-05-17T12:20:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>django ORM数据模型配置数据库．</p>
<p>django支持多个数据库，通过django ORM定义数据模型，比如<code>class User(Model)</code>，无法通过<code>class Meta</code>配置管理该数据模型对应的数据库，只能使用默认数据库<code>default</code>．</p>
<p>django <code>ConnectionRouter</code>解决数据模型与数据库映射．</p>
<p><strong>实现DB router</strong></p>
<p><code>db_router.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"></div><div class="line">_logger = logging.getLogger(<span class="string">'django'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseRouter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Database router to control the  models for differrent db.</div><div class="line">    """</div><div class="line"></div><div class="line">    DEFAULT_DB = <span class="string">'default'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_db</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">        db = getattr(model, <span class="string">'_database'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> db:</div><div class="line">            <span class="keyword">return</span> self.DEFAULT_DB</div><div class="line"></div><div class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> settings.DATABASES.keys():</div><div class="line">            <span class="keyword">return</span> db</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            _logger.warn(<span class="string">'%s not exist'</span> % db)</div><div class="line">            <span class="keyword">return</span> self.DEFAULT_DB</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._db(model, **hints)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._db(model, **hints)</div></pre></td></tr></table></figure>
<p><strong>配置DB routers</strong></p>
<p><code>DATABASE_ROUTERS = [&#39;db_router.DatabaseRouter&#39;]</code></p>
<p><strong>为Model制定数据库</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class User(Model)</div><div class="line">	_database = 'user_db'</div><div class="line">    class  Meta:</div><div class="line">    	db_table = 'user'</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p><strong>实现原理</strong></p>
<p>django通过<code>ConnectionRouter</code>管理数据库路由</p>
<p><code>django/db/utils.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionRouter</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @cached_property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">routers</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._routers <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._routers = settings.DATABASE_ROUTERS</div><div class="line">        routers = []</div><div class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> self._routers:</div><div class="line">            <span class="keyword">if</span> isinstance(r, six.string_types):</div><div class="line">                router = import_string(r)()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                router = r</div><div class="line">            routers.append(router)</div><div class="line">        <span class="keyword">return</span> routers</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_router_func</span><span class="params">(action)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_route_db</span><span class="params">(self, model, **hints)</span>:</span></div><div class="line">            chosen_db = <span class="keyword">None</span></div><div class="line">            <span class="keyword">for</span> router <span class="keyword">in</span> self.routers:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    method = getattr(router, action)</div><div class="line">                <span class="keyword">except</span> AttributeError:</div><div class="line">                    <span class="comment"># If the router doesn't have a method, skip to the next one.</span></div><div class="line">                    <span class="keyword">pass</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    chosen_db = method(model, **hints)</div><div class="line">                    <span class="keyword">if</span> chosen_db:</div><div class="line">                        <span class="keyword">return</span> chosen_db</div><div class="line">            instance = hints.get(<span class="string">'instance'</span>)</div><div class="line">            <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> instance._state.db:</div><div class="line">                <span class="keyword">return</span> instance._state.db</div><div class="line">            <span class="keyword">return</span> DEFAULT_DB_ALIAS</div><div class="line">        <span class="keyword">return</span> _route_db</div><div class="line"></div><div class="line">    db_for_read = _router_func(<span class="string">'db_for_read'</span>)</div><div class="line">    db_for_write = _router_func(<span class="string">'db_for_write'</span>)</div></pre></td></tr></table></figure>
<p>router初始化</p>
<p><code>router = ConnectionRouter()</code></p>
<p>router引用</p>
<p><code>django/db/models/query.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuerySet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"Return the database that will be used if this query is executed now"</span></div><div class="line">        <span class="keyword">if</span> self._for_write:</div><div class="line">            <span class="keyword">return</span> self._db <span class="keyword">or</span> router.db_for_write(self.model, **self._hints)</div><div class="line">        <span class="keyword">return</span> self._db <span class="keyword">or</span> router.db_for_read(self.model, **self._hints)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django ORM数据模型配置数据库．&lt;/p&gt;
&lt;p&gt;django支持多个数据库，通过django ORM定义数据模型，比如&lt;code&gt;class User(Model)&lt;/code&gt;，无法通过&lt;code&gt;class Meta&lt;/code&gt;配置管理该数据模型对应的数据库，
    
    </summary>
    
    
      <category term="django" scheme="http://blog.hotbaby.org/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Cache</title>
    <link href="http://blog.hotbaby.org/2017/05/17/http-cache/"/>
    <id>http://blog.hotbaby.org/2017/05/17/http-cache/</id>
    <published>2017-05-17T03:00:36.000Z</published>
    <updated>2017-05-17T03:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>缓存是一种用来存储资源副本的技术．</p>
<h1 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h1><h2 id="不同类型的缓存"><a href="#不同类型的缓存" class="headerlink" title="不同类型的缓存"></a>不同类型的缓存</h2><p>缓存的目标：</p>
<ul>
<li>减小服务器的负载，服务器不需要负责服务所有的客户端请求</li>
<li>需要更少的时间回传资源</li>
<li>…</li>
</ul>
<p>不同类型的缓存</p>
<ul>
<li>共享缓存 -　存储响应被很多用户复用</li>
<li>私有缓存 - 服务于单个用户</li>
</ul>
<p>其他缓存，gateway cache, CDN, reverse proxy cache 和　部署在服务器上的负载均衡器，以获得更好的可靠性，性能．</p>
<p><img src="https://mdn.mozillademos.org/files/13777/HTTPCachtType.png" alt=""></p>
<h3 id="私有浏览器缓存-Private-browser-cache"><a href="#私有浏览器缓存-Private-browser-cache" class="headerlink" title="私有浏览器缓存(Private browser cache)"></a>私有浏览器缓存(Private browser cache)</h3><p>私有缓存服务于单个用户．</p>
<h3 id="共享代理缓存-Shared-proxy-caches"><a href="#共享代理缓存-Shared-proxy-caches" class="headerlink" title="共享代理缓存(Shared proxy caches)"></a>共享代理缓存(Shared proxy caches)</h3><p>共享缓存服务于多个用户．比如ISP或者企业可以配置一个web代理，作为本地网络基础架构，服务于多个用户．热点资源可以被多个用户复用，减少网络流量和延迟．　</p>
<h2 id="缓存操作的目标"><a href="#缓存操作的目标" class="headerlink" title="缓存操作的目标"></a>缓存操作的目标</h2><p>HTTP缓存是可选的，有的时候并不希望复用缓存资源。</p>
<p>常用的缓存条目的形式：</p>
<ul>
<li>成功的检索请求结果 - 200 OK响应，比如HTML 文档，图片或者文件</li>
<li>永久重定向 - 301(Moved Permanently)响应</li>
<li>错误响应 - 404(Not Found)结果页</li>
<li>未完成的结果 - 206(Partial Content)响应</li>
<li>不仅仅是GET请求的响应 - 定义一个合适的cache key</li>
</ul>
<h2 id="缓存控制-Controlling-caching"><a href="#缓存控制-Controlling-caching" class="headerlink" title="缓存控制(Controlling caching)"></a>缓存控制(Controlling caching)</h2><h3 id="缓存控制头部-The-Cache-control-header"><a href="#缓存控制头部-The-Cache-control-header" class="headerlink" title="缓存控制头部(The Cache-control header)"></a>缓存控制头部(The Cache-control header)</h3><h3 id="Pragma头-The-Pragma-header"><a href="#Pragma头-The-Pragma-header" class="headerlink" title="Pragma头(The Pragma header)"></a>Pragma头(The Pragma header)</h3><h2 id="新鲜度-Freshness"><a href="#新鲜度-Freshness" class="headerlink" title="新鲜度(Freshness)"></a>新鲜度(Freshness)</h2><h3 id="Revved-资源"><a href="#Revved-资源" class="headerlink" title="Revved 资源"></a>Revved 资源</h3><h2 id="缓存验证-Cache-validation"><a href="#缓存验证-Cache-validation" class="headerlink" title="缓存验证(Cache validation)"></a>缓存验证(Cache validation)</h2><h3 id="ETags"><a href="#ETags" class="headerlink" title="ETags"></a>ETags</h3><h2 id="Varying-responses"><a href="#Varying-responses" class="headerlink" title="Varying responses"></a>Varying responses</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified</a></li>
<li><a href="https://tools.ietf.org/html/rfc7234" target="_blank" rel="external">rfc7234  Hypertext Transfer Protocol (HTTP/1.1): Caching</a></li>
<li><a href="HTTP Cache-Control Extensions for Stale Content">rfc5861 HTTP Cache-Control Extensions for Stale Content</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缓存是一种用来存储资源副本的技术．&lt;/p&gt;
&lt;h1 id=&quot;HTTP-缓存&quot;&gt;&lt;a href=&quot;#HTTP-缓存&quot; class=&quot;headerlink&quot; title=&quot;HTTP 缓存&quot;&gt;&lt;/a&gt;HTTP 缓存&lt;/h1&gt;&lt;h2 id=&quot;不同类型的缓存&quot;&gt;&lt;a href=&quot;#不
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WSGI</title>
    <link href="http://blog.hotbaby.org/2017/05/17/WSGI/"/>
    <id>http://blog.hotbaby.org/2017/05/17/WSGI/</id>
    <published>2017-05-17T02:56:44.000Z</published>
    <updated>2017-05-17T02:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>WSGI(Web Server Gateway Interface) Web服务网关接口。</p>
<p>WSGI的目的替代CGI。CGI进程（类似Python解释器）针对每个请求进行创建，完成请求后退出。如果应程序接收树钱个请求，创建大量的语言解释器进程就会很快导致服务器宕机。</p>
<p><strong>其目标在Web服务器与Web框架层之间提供一个通用的API标准，减少之间互操作性，并形成统一的调用方式。</strong></p>
<h2 id="WSGI-应用"><a href="#WSGI-应用" class="headerlink" title="WSGI 应用"></a>WSGI 应用</h2><p>根据WSGI的定义，其应用是可调用的对象，其参数固定为两个：</p>
<ul>
<li>含有服务器环境变量的字典</li>
<li>可调用的对象， 该对象使用HTTP状态码和会返回客户端的HTTP头来初始化响应</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_wsgi_app</span><span class="params">(environment, start_response)</span>:</span></div><div class="line">    status = <span class="string">'200 OK'</span></div><div class="line">    headers = [<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>]</div><div class="line">    start_response(status, headers)</div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello world!'</span>]</div></pre></td></tr></table></figure>
<p><strong>environment</strong> 包含一些环境变量，如HTTP_HOST, HTTP_USER, HTTP_AGENT, SERVER_PROTOCOL等。‘</p>
<p><strong>start_response()</strong>是一个可调用的对象，必须在应用执行，生成最终发送回客户端的响应</p>
<p>werkzeug中start_response定义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> exc_info:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> headers_sent:</div><div class="line">                reraise(*exc_info)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            exc_info = <span class="keyword">None</span></div><div class="line">    <span class="keyword">elif</span> headers_set:</div><div class="line">        <span class="keyword">raise</span> AssertionError(<span class="string">'Headers already set'</span>)</div><div class="line">    headers_set[:] = [status, response_headers]</div><div class="line">    <span class="keyword">return</span> write</div></pre></td></tr></table></figure>
<h2 id="WSGI服务器"><a href="#WSGI服务器" class="headerlink" title="WSGI服务器"></a>WSGI服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> StringIO</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_wsgi_app</span><span class="params">(app, environment)</span>:</span></div><div class="line">    body = StringIO.StringIO()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, headers)</span>:</span></div><div class="line">        body.write(<span class="string">'Status: %s\r\n'</span> % status)</div><div class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> headers:</div><div class="line">            body.write(<span class="string">'%s: %s\r\n'</span> % header)</div><div class="line">        <span class="keyword">return</span> body.write</div><div class="line"></div><div class="line">    iterable = app(environment, start_response)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        body.write(<span class="string">'\r\n%s\r\n'</span> % <span class="string">'\r\n'</span>.join(line <span class="keyword">for</span> line <span class="keyword">in</span> iterable))</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> hasattr(iterable, <span class="string">'close'</span>) <span class="keyword">and</span> callable(iterable.close):</div><div class="line">            iterable.close()</div></pre></td></tr></table></figure>
<h2 id="Flask-WSGI-应用和服务实现"><a href="#Flask-WSGI-应用和服务实现" class="headerlink" title="Flask WSGI 应用和服务实现"></a>Flask WSGI 应用和服务实现</h2><p><strong>flask WSGI app</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Flask:wsgi_app</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""The actual WSGI application.  This is not implemented in</span></div><div class="line">    `__call__` so that middlewares can be applied without losing a</div><div class="line">    reference to the class.  So instead of doing this::</div><div class="line"></div><div class="line">        app = MyMiddleware(app)</div><div class="line"></div><div class="line">    It's a better idea to do this instead::</div><div class="line"></div><div class="line">        app.wsgi_app = MyMiddleware(app.wsgi_app)</div><div class="line"></div><div class="line">    Then you still have the original application object around and</div><div class="line">    can continue to call methods on it.</div><div class="line"></div><div class="line">    .. versionchanged:: 0.7</div><div class="line">       The behavior of the before and after request callbacks was changed</div><div class="line">       under error conditions and a new callback was added that will</div><div class="line">       always execute at the end of the request, independent on if an</div><div class="line">       error occurred or not.  See :ref:`callbacks-and-errors`.</div><div class="line"></div><div class="line">    :param environ: a WSGI environment</div><div class="line">    :param start_response: a callable accepting a status code,</div><div class="line">                           a list of headers and an optional</div><div class="line">                           exception context to start the response</div><div class="line">    """</div><div class="line">    ctx = self.request_context(environ)</div><div class="line">    ctx.push()</div><div class="line">    error = <span class="keyword">None</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            response = self.full_dispatch_request()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            error = e</div><div class="line">            response = self.handle_exception(e)</div><div class="line">        <span class="keyword">return</span> response(environ, start_response)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> self.should_ignore_error(error):</div><div class="line">            error = <span class="keyword">None</span></div><div class="line">        ctx.auto_pop(error)</div><div class="line"></div><div class="line"><span class="comment"># Flask:__call__</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""Shortcut for :attr:`wsgi_app`."""</span></div><div class="line">    <span class="keyword">return</span> self.wsgi_app(environ, start_response)</div><div class="line"></div><div class="line"><span class="comment"># BaseResponse:__call__</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""Process this response as WSGI application.</span></div><div class="line"></div><div class="line">    :param environ: the WSGI environment.</div><div class="line">    :param start_response: the response callable provided by the WSGI</div><div class="line">                           server.</div><div class="line">    :return: an application iterator</div><div class="line">    """</div><div class="line">    app_iter, status, headers = self.get_wsgi_response(environ)</div><div class="line">    start_response(status, headers)</div><div class="line">    <span class="keyword">return</span> app_iter</div></pre></td></tr></table></figure>
<p><strong>flask WSGI Server</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_wsgi</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.headers.get(<span class="string">'Expect'</span>, <span class="string">''</span>).lower().strip() == <span class="string">'100-continue'</span>:</div><div class="line">        self.wfile.write(<span class="string">b'HTTP/1.1 100 Continue\r\n\r\n'</span>)</div><div class="line"></div><div class="line">    self.environ = environ = self.make_environ()</div><div class="line">    headers_set = []</div><div class="line">    headers_sent = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(data)</span>:</span></div><div class="line">        <span class="keyword">assert</span> headers_set, <span class="string">'write() before start_response'</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</div><div class="line">            status, response_headers = headers_sent[:] = headers_set</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                code, msg = status.split(<span class="keyword">None</span>, <span class="number">1</span>)</div><div class="line">            <span class="keyword">except</span> ValueError:</div><div class="line">                code, msg = status, <span class="string">""</span></div><div class="line">            self.send_response(int(code), msg)</div><div class="line">            header_keys = set()</div><div class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> response_headers:</div><div class="line">                self.send_header(key, value)</div><div class="line">                key = key.lower()</div><div class="line">                header_keys.add(key)</div><div class="line">            <span class="keyword">if</span> <span class="string">'content-length'</span> <span class="keyword">not</span> <span class="keyword">in</span> header_keys:</div><div class="line">                self.close_connection = <span class="keyword">True</span></div><div class="line">                self.send_header(<span class="string">'Connection'</span>, <span class="string">'close'</span>)</div><div class="line">            <span class="keyword">if</span> <span class="string">'server'</span> <span class="keyword">not</span> <span class="keyword">in</span> header_keys:</div><div class="line">                self.send_header(<span class="string">'Server'</span>, self.version_string())</div><div class="line">            <span class="keyword">if</span> <span class="string">'date'</span> <span class="keyword">not</span> <span class="keyword">in</span> header_keys:</div><div class="line">                self.send_header(<span class="string">'Date'</span>, self.date_time_string())</div><div class="line">            self.end_headers()</div><div class="line"></div><div class="line">        <span class="keyword">assert</span> isinstance(data, bytes), <span class="string">'applications must write bytes'</span></div><div class="line">        self.wfile.write(data)</div><div class="line">        self.wfile.flush()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> exc_info:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">if</span> headers_sent:</div><div class="line">                    reraise(*exc_info)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                exc_info = <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> headers_set:</div><div class="line">            <span class="keyword">raise</span> AssertionError(<span class="string">'Headers already set'</span>)</div><div class="line">        headers_set[:] = [status, response_headers]</div><div class="line">        <span class="keyword">return</span> write</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(app)</span>:</span></div><div class="line">        application_iter = app(environ, start_response)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> application_iter:</div><div class="line">                write(data)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</div><div class="line">                write(<span class="string">b''</span>)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="keyword">if</span> hasattr(application_iter, <span class="string">'close'</span>):</div><div class="line">                application_iter.close()</div><div class="line">            application_iter = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        execute(self.server.app)</div><div class="line">    <span class="keyword">except</span> (socket.error, socket.timeout) <span class="keyword">as</span> e:</div><div class="line">        self.connection_dropped(e, environ)</div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="keyword">if</span> self.server.passthrough_errors:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">from</span> werkzeug.debug.tbtools <span class="keyword">import</span> get_current_traceback</div><div class="line">        traceback = get_current_traceback(ignore_system_exceptions=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># if we haven't yet sent the headers but they are set</span></div><div class="line">            <span class="comment"># we roll back to be able to set them again.</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</div><div class="line">                <span class="keyword">del</span> headers_set[:]</div><div class="line">            execute(InternalServerError())</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        self.server.log(<span class="string">'error'</span>, <span class="string">'Error on request:\n%s'</span>,</div><div class="line">                        traceback.plaintext)</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li>《Python核心编程》</li>
<li><a href="https://docs.python.org/2/howto/webservers.html#step-back-wsgi" target="_blank" rel="external">https://docs.python.org/2/howto/webservers.html#step-back-wsgi</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WSGI(Web Server Gateway Interface) Web服务网关接口。&lt;/p&gt;
&lt;p&gt;WSGI的目的替代CGI。CGI进程（类似Python解释器）针对每个请求进行创建，完成请求后退出。如果应程序接收树钱个请求，创建大量的语言解释器进程就会很快导致服务器
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSON resources</title>
    <link href="http://blog.hotbaby.org/2017/05/16/json-protocols/"/>
    <id>http://blog.hotbaby.org/2017/05/16/json-protocols/</id>
    <published>2017-05-16T01:58:00.000Z</published>
    <updated>2017-05-17T12:38:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JSNO-RPC</strong></p>
<p>A light weight remote procedure call protocol.</p>
<p><strong>SJON API</strong></p>
<p>A specification for building API in JSON.</p>
<p><strong>JSONBIN</strong></p>
<p>JSONbin.io is a simple JSON storage service for free.</p>
<p><strong>jq</strong></p>
<p>jq is a light-weight and flexible command-line JSON processor.</p>
<p><strong>References</strong></p>
<ul>
<li><a href="http://www.jsonrpc.org/" target="_blank" rel="external">JSON-RPC</a></li>
<li><a href="https://stedolan.github.io/jq/" target="_blank" rel="external">jq</a></li>
<li><a href="https://jsonbin.io/" target="_blank" rel="external">jsonbin</a></li>
<li><a href="http://jsonapi.org/" target="_blank" rel="external">jsonapi</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JSNO-RPC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A light weight remote procedure call protocol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SJON API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A specification f
    
    </summary>
    
    
      <category term="json" scheme="http://blog.hotbaby.org/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Flask signal</title>
    <link href="http://blog.hotbaby.org/2017/05/14/Flask-signal/"/>
    <id>http://blog.hotbaby.org/2017/05/14/Flask-signal/</id>
    <published>2017-05-14T08:50:08.000Z</published>
    <updated>2017-05-17T03:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Flask signals 默认没有自己实现signal，而是使用blink进行信号的定义，连接，分发。</p>
<h2 id="Flask-singal"><a href="#Flask-singal" class="headerlink" title="Flask singal"></a>Flask singal</h2><p>flask未实现自己信号处理,而是使用blink.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">signals_available = <span class="keyword">False</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</div><div class="line">    signals_available = <span class="keyword">True</span></div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Namespace</span><span class="params">(object)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">signal</span><span class="params">(self, name, doc=None)</span>:</span></div><div class="line">            <span class="keyword">return</span> _FakeSignal(name, doc)</div></pre></td></tr></table></figure>
<p>flask 支持的信号 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">_signals = Namespace()</div><div class="line"></div><div class="line"><span class="comment"># Core signals.  For usage examples grep the source code or consult</span></div><div class="line"><span class="comment"># the API documentation in docs/api.rst as well as docs/signals.rst</span></div><div class="line">template_rendered = _signals.signal(<span class="string">'template-rendered'</span>)</div><div class="line">before_render_template = _signals.signal(<span class="string">'before-render-template'</span>)</div><div class="line">request_started = _signals.signal(<span class="string">'request-started'</span>)</div><div class="line">request_finished = _signals.signal(<span class="string">'request-finished'</span>)</div><div class="line">request_tearing_down = _signals.signal(<span class="string">'request-tearing-down'</span>)</div><div class="line">got_request_exception = _signals.signal(<span class="string">'got-request-exception'</span>)</div><div class="line">appcontext_tearing_down = _signals.signal(<span class="string">'appcontext-tearing-down'</span>)</div><div class="line">appcontext_pushed = _signals.signal(<span class="string">'appcontext-pushed'</span>)</div><div class="line">appcontext_popped = _signals.signal(<span class="string">'appcontext-popped'</span>)</div><div class="line">message_flashed = _signals.signal(<span class="string">'message-flashed'</span>)</div></pre></td></tr></table></figure>
<h2 id="Blinker-signal"><a href="#Blinker-signal" class="headerlink" title="Blinker signal"></a>Blinker signal</h2><p>blinker支持的特性:</p>
<ul>
<li>a global registry of named signals</li>
<li>anonymous signals</li>
<li>custom name registries</li>
<li>permanently or temporarily connected receivers</li>
<li>automically disconnected receivers via weak referencing</li>
<li>sending arbirary data payloads</li>
<li>collecting return values from signal receivers</li>
<li>thread safety</li>
</ul>
<h3 id="Blinker-signal-sample"><a href="#Blinker-signal-sample" class="headerlink" title="Blinker signal sample"></a>Blinker signal sample</h3><p>TODO</p>
<h3 id="Blinker-signal-realization"><a href="#Blinker-signal-realization" class="headerlink" title="Blinker signal realization"></a>Blinker signal realization</h3><p>TODO </p>
<p>注册</p>
<p>弱引用</p>
<p>线程安全</p>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>connecter weak reference</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_signal_handlers</span><span class="params">(app)</span>:</span></div><div class="line">   <span class="keyword">import</span> logging</div><div class="line">   <span class="keyword">from</span> flask.signals <span class="keyword">import</span> request_finished</div><div class="line">   _logger = logging.getLogger(<span class="string">'api.debug'</span>)</div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">log_response</span><span class="params">(sender, response, **options)</span>:</span></div><div class="line">       print(response)</div><div class="line">   request_finished.connect(log_response, app)</div></pre></td></tr></table></figure>
<p>以上代码，不能按原意正确的运行。因为log_response是局部作用域函数，在函数调用完成后，该作用域会消失，因此不能正确的调用<code>log_response</code>函数。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://pythonhosted.org/blinker/" target="_blank" rel="external">https://pythonhosted.org/blinker/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask signals 默认没有自己实现signal，而是使用blink进行信号的定义，连接，分发。&lt;/p&gt;
&lt;h2 id=&quot;Flask-singal&quot;&gt;&lt;a href=&quot;#Flask-singal&quot; class=&quot;headerlink&quot; title=&quot;Flask si
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx autoindex 乱码</title>
    <link href="http://blog.hotbaby.org/2017/05/09/nginx-autoindex-%E4%B9%B1%E7%A0%81/"/>
    <id>http://blog.hotbaby.org/2017/05/09/nginx-autoindex-乱码/</id>
    <published>2017-05-09T17:01:00.000Z</published>
    <updated>2017-05-15T02:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用nginx_autoindex_moudle检索本地文件时，如果文件名字包含中文，则会出现乱码.</p>
<p>nginx配置文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location /static/ &#123;</div><div class="line">alias $static/;        </div><div class="line">autoindex on;</div><div class="line">autoindex_exact_size on;</div><div class="line">autoindex_localtime on;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>检查发现nginx auto_index 生成的html文件header未包含<strong>charset</strong></p>
<p>nginx 源码剖析</p>
<p><code>src/http/modules/ngx_http_autoindex_module.c</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (format) &#123;</div><div class="line"></div><div class="line"><span class="keyword">case</span> NGX_HTTP_AUTOINDEX_JSON:</div><div class="line">    ngx_str_set(&amp;r-&gt;headers_out.content_type, <span class="string">"application/json"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> NGX_HTTP_AUTOINDEX_JSONP:</div><div class="line">    ngx_str_set(&amp;r-&gt;headers_out.content_type, <span class="string">"application/javascript"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> NGX_HTTP_AUTOINDEX_XML:</div><div class="line">    ngx_str_set(&amp;r-&gt;headers_out.content_type, <span class="string">"text/xml"</span>);</div><div class="line">    ngx_str_set(&amp;r-&gt;headers_out.charset, <span class="string">"utf-8"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">default</span>: <span class="comment">/* NGX_HTTP_AUTOINDEX_HTML */</span></div><div class="line">    ngx_str_set(&amp;r-&gt;headers_out.content_type, <span class="string">"text/html"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>确认<strong>autoindex_format</strong>为html时，确实未增加charset的http头部信息。</p>
<p>修改源代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span>: <span class="comment">/* NGX_HTTP_AUTOINDEX_HTML */</span></div><div class="line">    ngx_str_set(&amp;r-&gt;headers_out.content_type, <span class="string">"text/html"</span>);</div><div class="line">    ngx_str_set(&amp;r-&gt;headers_out.charset, <span class="string">"utf-8"</span>);</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>重新编译nginx</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./configure --prefix=/opt/nginx --with-http_ssl_module</div><div class="line">$ make; make install</div></pre></td></tr></table></figure>
<p>重启nginx</p>
<p>强制刷新页面， OK, 问题解决</p>
<p> <em>An official read-only mirror of <a href="http://hg.nginx.org/nginx/" target="_blank" rel="external">http://hg.nginx.org/nginx/</a> which is updated hourly. Pull requests on GitHub cannot be accepted and will be automatically closed. The proper way to submit changes to nginx is via the nginx development mailing list, see <a href="http://nginx.org/en/docs/contributing_changes.html" target="_blank" rel="external">http://nginx.org/en/docs/contributing_changes.html</a> <a href="http://nginx.org/" target="_blank" rel="external">http://nginx.org/</a></em></p>
<p> nginx 不支持github pull request. Fuck</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/nginx/nginx" target="_blank" rel="external">nginx github repo</a></li>
<li><a href="https://nginx.org/en/docs/http/ngx_http_autoindex_module.html" target="_blank" rel="external">nginx autoindex module document</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用nginx_autoindex_moudle检索本地文件时，如果文件名字包含中文，则会出现乱码.&lt;/p&gt;
&lt;p&gt;nginx配置文件如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://blog.hotbaby.org/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks</title>
    <link href="http://blog.hotbaby.org/2017/05/08/shadowsocks/"/>
    <id>http://blog.hotbaby.org/2017/05/08/shadowsocks/</id>
    <published>2017-05-08T00:07:00.000Z</published>
    <updated>2017-05-10T16:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>shadowsocks  科学上网解决方案</p>
<h2 id="Shadowsocks-Server"><a href="#Shadowsocks-Server" class="headerlink" title="Shadowsocks Server"></a>Shadowsocks Server</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p><code>pip install shadowsocks==2.1.0</code></p>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p><code>cat /etc/shadowsocks/config.json</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;ip address&quot;,</div><div class="line">    &quot;server_port&quot;:8388,</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;password&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false,</div><div class="line">    &quot;workers&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><p><code>/usr/bin/ssserver -c /etc/shadowsocks/config.json</code></p>
<h3 id="Boot-Script"><a href="#Boot-Script" class="headerlink" title="Boot Script"></a>Boot Script</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line">set -e</div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">DESC=&quot;shadowsocks daemon&quot;</div><div class="line">NAME=shadowsocks</div><div class="line">DAEMON=/usr/bin/ssserver</div><div class="line">SCRIPTNAME=/etc/init.d/shadowsocks</div><div class="line"></div><div class="line"># If the daemon file is not found, terminate the script.</div><div class="line">test -x $DAEMON || exit 0</div><div class="line"></div><div class="line">d_start() &#123;</div><div class="line">  $DAEMON -c /etc/shadowsocks/config.json &gt;&gt; /var/log/shadowsocks.log 2&gt;&amp;1 &amp; </div><div class="line">  echo -n &quot; already running&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">d_stop() &#123;</div><div class="line">  killall ssserver || echo -n &quot; not running&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">  start)</div><div class="line">    echo -n &quot;Starting $DESC: $NAME&quot;</div><div class="line">    d_start</div><div class="line">    echo &quot;.&quot;</div><div class="line">  ;;</div><div class="line">  stop)</div><div class="line">    echo -n &quot;Stopping $DESC: $NAME&quot;</div><div class="line">    d_stop</div><div class="line">    echo &quot;.&quot;</div><div class="line">  ;;</div><div class="line">  restart)</div><div class="line">  echo -n &quot;Restarting $DESC: $NAME&quot;</div><div class="line">  d_stop</div><div class="line"># Sleep for two seconds before starting again, this should give the</div><div class="line"># Nginx daemon some time to perform a graceful stop.</div><div class="line">  sleep 2</div><div class="line">  d_start</div><div class="line">  echo &quot;.&quot;</div><div class="line">  ;;</div><div class="line">  *)</div><div class="line">  echo &quot;Usage: $SCRIPTNAME &#123;start|stop|restart&#125;&quot; &gt;&amp;2</div><div class="line">  exit 3</div><div class="line">  ;;</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure>
<p>done</p>
<h2 id="Shadowsocks-Client"><a href="#Shadowsocks-Client" class="headerlink" title="Shadowsocks Client"></a>Shadowsocks Client</h2><h3 id="Linux-Client"><a href="#Linux-Client" class="headerlink" title="Linux Client"></a>Linux Client</h3><p><strong>download shadowsocks linux client</strong></p>
<p><a href="https://jaist.dl.sourceforge.net/project/shadowsocksgui/dist/shadowsocks-gui-0.6.4-linux-x64.tar.xz" target="_blank" rel="external">shadowsocks download</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvf shadowsocks-gui*.tar.gz</div><div class="line">mv shadowsocks-gui /opt/shadowsocks/</div></pre></td></tr></table></figure>
<p><strong>config linux application</strong></p>
<p><code>/usr/share/applications/shadowsocks.desktop</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">Version=1.0</div><div class="line">Name=shadowsocks</div><div class="line">Exec=/opt/shadowsocks/start.sh</div><div class="line">Terminal=false</div><div class="line">#Icon=/opt/eclipse/icon.xpm</div><div class="line">Type=Application</div><div class="line">Categories=Development</div></pre></td></tr></table></figure>
<p><strong>run</strong></p>
<p>搜索 shadowsocks, 点击运行</p>
<h3 id="Android-Client"><a href="#Android-Client" class="headerlink" title="Android Client"></a>Android Client</h3><p>直接下载apk安装、配置即可。</p>
<h3 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h3><p>安装polipo</p>
<p><code>sudo apt-get install polipo</code></p>
<p>配置polipo</p>
<p><code>/etc/polipo/config</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">socksParentProxy = &quot;127.0.0.1:1080&quot;</div><div class="line">socksProxyType = socks5</div><div class="line"></div><div class="line">logSyslog = true</div><div class="line">logFile = /var/log/polipo/polipo.log</div></pre></td></tr></table></figure>
<p>启动polipo</p>
<p><code>sudo polipo</code></p>
<p>配置终端代理</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:8123</div><div class="line"><span class="built_in">export</span> https_proxy=127.0.0.1:8123</div></pre></td></tr></table></figure>
<p>验证代理<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://www.google.com/</div></pre></td></tr></table></figure></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/shadowsocks/shadowsocks/wiki" target="_blank" rel="external">shadowsocks wiki</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="external">shadowsocks android application</a></li>
<li><a href="https://jaist.dl.sourceforge.net/project/shadowsocksgui/dist/shadowsocks-gui-0.6.4-linux-x64.tar.xz" target="_blank" rel="external">shadowsocks linux client</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shadowsocks  科学上网解决方案&lt;/p&gt;
&lt;h2 id=&quot;Shadowsocks-Server&quot;&gt;&lt;a href=&quot;#Shadowsocks-Server&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks Server&quot;&gt;&lt;/a&gt;Sha
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://blog.hotbaby.org/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>McFarland</title>
    <link href="http://blog.hotbaby.org/2017/05/01/McFarland/"/>
    <id>http://blog.hotbaby.org/2017/05/01/McFarland/</id>
    <published>2017-05-01T15:37:00.000Z</published>
    <updated>2017-05-15T02:23:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>MacFarland movie lines.</p>
<p>We fly like black birds through the orange groves.</p>
<p>When we run, we own the earth. The land is ours, we speak the birds’s language. Not immigrants no more, Not stupid Mexicans.</p>
<p>When we run, our spirits fly. We speak to the gods.</p>
<p>When we run, we are the gods.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MacFarland movie lines.&lt;/p&gt;
&lt;p&gt;We fly like black birds through the orange groves.&lt;/p&gt;
&lt;p&gt;When we run, we own the earth. The land is ours,
    
    </summary>
    
    
      <category term="电影" scheme="http://blog.hotbaby.org/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="跑步" scheme="http://blog.hotbaby.org/tags/%E8%B7%91%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>hacker ethic</title>
    <link href="http://blog.hotbaby.org/2017/04/28/%E9%BB%91%E5%AE%A2%E4%BC%A6%E7%90%86/"/>
    <id>http://blog.hotbaby.org/2017/04/28/黑客伦理/</id>
    <published>2017-04-28T09:29:44.000Z</published>
    <updated>2017-05-06T03:38:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>hacker ethic</p>
<ol>
<li>Access to computers and anything that might teach you something about the way the world works - should be unlimited and total. Always yield to the hands-on imperative.</li>
<li>All information should be free.</li>
<li>Mitrust Authority, Promote Decentralization.</li>
<li>Hackers should be judged by their hacking, not bogus criteria such as degrees, age, race or position.</li>
<li>You can create art and beauty on a computer.</li>
<li>Computers can change your life for the better.</li>
</ol>
<p>黑客伦理</p>
<ol>
<li>使用计算机以及所有有助于了解这个世界本质的事物都不应该受到任何限制。任何事情都应该亲手尝试。</li>
<li>信息应该全部免费。</li>
<li>不信任权威，提倡去中心化。</li>
<li>判断一名黑客的水平应该看他的技术能力，而不是他的学历、年龄或地位等其他标准。</li>
<li>你可以使用计算机创造美和艺术。</li>
<li>计算机可以使你的生活更好。</li>
</ol>
<p>黑客伦理的核心价值观：分享、开放、民主、计算机的自由使用和进步。</p>
<p>为黑客正名，黑客都是高智商，具有探索精神，能力超群，10X的大神级别的程序员。黑客创造了Unix、Linux, 黑客创建了Microsoft 、Google、Facebook，黑客编写了《计算机程序设计艺术》等等。和建筑师一样，黑客create the world。</p>
<p>write the code and change the world.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hacker ethic&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Access to computers and anything that might teach you something about the way the world works - should be unlim
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django signal</title>
    <link href="http://blog.hotbaby.org/2017/04/20/django-signals/"/>
    <id>http://blog.hotbaby.org/2017/04/20/django-signals/</id>
    <published>2017-04-20T15:45:00.000Z</published>
    <updated>2017-06-15T07:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>信号实现了一个复杂系统中子系统之间的解耦，一个子系统的状态发生改变时，通过信号同步（或通知）其他依赖于该系统的系统更新状态，实现了状态的一致性。</p>
<p>不同于flask，直接使用blinker，django内部实现了信号处理机制。</p>
<p><strong>实现原理</strong></p>
<p>定义信号</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, providing_args=None, use_caching=False)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Create a new signal.</div><div class="line"></div><div class="line">    providing_args</div><div class="line">        A list of the arguments this signal can pass along in a send() call.</div><div class="line">    """</div><div class="line">    self.receivers = []</div><div class="line">    <span class="keyword">if</span> providing_args <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        providing_args = []</div><div class="line">    self.providing_args = set(providing_args)</div><div class="line">    self.lock = threading.Lock()</div><div class="line">    self.use_caching = use_caching</div><div class="line">    <span class="comment"># For convenience we create empty caches even if they are not used.</span></div><div class="line">    <span class="comment"># A note about caching: if use_caching is defined, then for each</span></div><div class="line">    <span class="comment"># distinct sender we cache the receivers that sender has in</span></div><div class="line">    <span class="comment"># 'sender_receivers_cache'. The cache is cleaned when .connect() or</span></div><div class="line">    <span class="comment"># .disconnect() is called and populated on send().</span></div><div class="line">    self.sender_receivers_cache = weakref.WeakKeyDictionary() <span class="keyword">if</span> use_caching <span class="keyword">else</span> &#123;&#125;</div><div class="line">    self._dead_receivers = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>连接信号</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, receiver, sender=None, weak=True, dispatch_uid=None)</span>:</span></div><div class="line">   <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</div><div class="line"></div><div class="line">    <span class="comment"># If DEBUG is on, check that we got a good receiver</span></div><div class="line">    <span class="keyword">if</span> settings.configured <span class="keyword">and</span> settings.DEBUG:</div><div class="line">        <span class="keyword">assert</span> callable(receiver), <span class="string">"Signal receivers must be callable."</span></div><div class="line"></div><div class="line">        <span class="comment"># Check for **kwargs</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> func_accepts_kwargs(receiver):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Signal receivers must accept keyword arguments (**kwargs)."</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> dispatch_uid:</div><div class="line">        lookup_key = (dispatch_uid, _make_id(sender))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        lookup_key = (_make_id(receiver), _make_id(sender))</div><div class="line"></div><div class="line">    <span class="keyword">if</span> weak:</div><div class="line">        ref = weakref.ref</div><div class="line">        receiver_object = receiver</div><div class="line">        <span class="comment"># Check for bound methods</span></div><div class="line">        <span class="keyword">if</span> hasattr(receiver, <span class="string">'__self__'</span>) <span class="keyword">and</span> hasattr(receiver, <span class="string">'__func__'</span>):</div><div class="line">            ref = WeakMethod</div><div class="line">            receiver_object = receiver.__self__</div><div class="line">        <span class="keyword">if</span> sys.version_info &gt;= (<span class="number">3</span>, <span class="number">4</span>):</div><div class="line">            receiver = ref(receiver)</div><div class="line">            weakref.finalize(receiver_object, self._remove_receiver)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            receiver = ref(receiver, self._remove_receiver)</div><div class="line"></div><div class="line">    <span class="keyword">with</span> self.lock:</div><div class="line">        self._clear_dead_receivers()</div><div class="line">        <span class="keyword">for</span> r_key, _ <span class="keyword">in</span> self.receivers:</div><div class="line">            <span class="keyword">if</span> r_key == lookup_key:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.receivers.append((lookup_key, receiver))</div><div class="line">        self.sender_receivers_cache.clear()</div></pre></td></tr></table></figure>
<p>发送信号</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, sender, **named)</span>:</span></div><div class="line">    responses = []</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.receivers <span class="keyword">or</span> self.sender_receivers_cache.get(sender) <span class="keyword">is</span> NO_RECEIVERS:</div><div class="line">        <span class="keyword">return</span> responses</div><div class="line"></div><div class="line">    <span class="keyword">for</span> receiver <span class="keyword">in</span> self._live_receivers(sender):</div><div class="line">        response = receiver(signal=self, sender=sender, **named)</div><div class="line">        responses.append((receiver, response))</div><div class="line">    <span class="keyword">return</span> responses</div></pre></td></tr></table></figure>
<p>断开连接</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">disconnect</span><span class="params">(self, receiver=None, sender=None, weak=True, dispatch_uid=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> dispatch_uid:</div><div class="line">        lookup_key = (dispatch_uid, _make_id(sender))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        lookup_key = (_make_id(receiver), _make_id(sender))</div><div class="line"></div><div class="line">    disconnected = <span class="keyword">False</span></div><div class="line">    <span class="keyword">with</span> self.lock:</div><div class="line">        self._clear_dead_receivers()</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(self.receivers)):</div><div class="line">            (r_key, _) = self.receivers[index]</div><div class="line">            <span class="keyword">if</span> r_key == lookup_key:</div><div class="line">                disconnected = <span class="keyword">True</span></div><div class="line">                <span class="keyword">del</span> self.receivers[index]</div><div class="line">                <span class="keyword">break</span></div><div class="line">        self.sender_receivers_cache.clear()</div><div class="line">    <span class="keyword">return</span> disconnected</div></pre></td></tr></table></figure>
<p>信号发生时序图</p>
<p>TODO</p>
<p>weakref</p>
<p>为了防止调用被释放了对象，信号内部保持对receiver调用对象的弱引用，每次发送信号之前，检查该对象是否存在，如果不存在，则标记<code>_dead_receivers</code>为True,等待清楚。</p>
<p>thread lock</p>
<p>使用线程锁保证线程安全</p>
<p><strong>观察者设计模式</strong></p>
<p>定义对象间一对多的依赖关系，当一个对象的状体发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>
<p>将一系统分割成一系列相互协作的类有一个副作用：需要维护对象间的一致性。我们不希望为了维持一致性而使各类聚合，这样就降低了可重用性。</p>
<p>observer模式描述了如何建立这种关系。这一模式的关键对象是目标（subject）和观察者（observer）.一个目标可以有任意数量的观察者。一旦目标的状态发生改变，所有的观察者都得到通知。作为对这个通知的响应，每个观察者都将查询目标以使其状态与目标的状态同步。</p>
<p>这种交互也成为发布-订阅（publish-subscribe）.目标是通知的发布者，可以有任意数目的观察者订阅并接收通知。</p>
<p><code>/django/dispatch/dispatcher.py</code></p>
<p><strong>References</strong></p>
<ul>
<li><a href="https://docs.python.org/2/library/weakref.html" target="_blank" rel="external">python2.7 weakref</a></li>
<li><a href="https://docs.python.org/3.4/library/weakref.html" target="_blank" rel="external">python3.4 weakref</a></li>
<li><em>Design Patterns - Elements of Reusable Object-Oriented Software Observer</em></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信号实现了一个复杂系统中子系统之间的解耦，一个子系统的状态发生改变时，通过信号同步（或通知）其他依赖于该系统的系统更新状态，实现了状态的一致性。&lt;/p&gt;
&lt;p&gt;不同于flask，直接使用blinker，django内部实现了信号处理机制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现
    
    </summary>
    
      <category term="django" scheme="http://blog.hotbaby.org/categories/django/"/>
    
    
      <category term="Python" scheme="http://blog.hotbaby.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://blog.hotbaby.org/2017/04/19/git/"/>
    <id>http://blog.hotbaby.org/2017/04/19/git/</id>
    <published>2017-04-19T10:31:00.000Z</published>
    <updated>2017-06-26T01:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git is a free and open source distribute version control system designed to handle evertything from small to very large project wit speed and efficiency.</p>
<h2 id="custom-domain-redirect"><a href="#custom-domain-redirect" class="headerlink" title="custom domain redirect"></a>custom domain redirect</h2><p>添加DNS解析记录：</p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>记录值</th>
</tr>
</thead>
<tbody>
<tr>
<td>CNAME</td>
<td>blog</td>
<td>hotbaby.github.io</td>
</tr>
</tbody>
</table>
<p>修改GitHub pages CNAME记录：</p>
<p>创建CNAME文件，并写入域名。 比如<code>echo &#39;blog.mengyangyang.org&#39; &gt;&gt; CNAME</code></p>
<p>hexo 更新覆盖CNAME:</p>
<p>在<code>source</code>目录下创建CNAME文件，并写入域名</p>
<h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h2><p>以引用PCI项目为例，介绍如何添加子模块</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:hotbaby/PCI.git</div><div class="line">$ git submodule add https://github.com/uolter/PCI.git code/origin</div><div class="line">$ git commit -m <span class="string">'Add PCI submodule.'</span></div><div class="line">$ git push</div></pre></td></tr></table></figure>
<h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><p>添加tag</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git tag tag_name</div><div class="line">$ git push origin tag_name</div><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure>
<p>某次提交打tag</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-a</span> tag_name commit_id</div><div class="line">$ git push origin tag_name</div><div class="line">$ git push origin --tags <span class="comment"># 全部tags</span></div></pre></td></tr></table></figure>
<p>查看tag</p>
<p><code>git tag --list</code></p>
<p>切换到tag</p>
<p><code>git check tag_name</code></p>
<p>删除tag<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-d</span> tag_name <span class="comment">#删除本地tag</span></div><div class="line">$ git push  origin --delete tag &lt;tag_name&gt; <span class="comment">#删除服务器tag</span></div></pre></td></tr></table></figure></p>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>编辑配置文件：</p>
<p><code>vim ~/.gitconfig</code></p>
<p>配置编辑器：</p>
<p><code>git config --global core.editor vim</code></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="external">Git子模块</a></li>
<li><a href="http://wonux.tech/git-git-submodule.html" target="_blank" rel="external">Git子模块引用外部项目</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git is a free and open source distribute version control system designed to handle evertything from small to very large project wit speed
    
    </summary>
    
      <category term="git" scheme="http://blog.hotbaby.org/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.hotbaby.org/tags/git/"/>
    
  </entry>
  
</feed>
